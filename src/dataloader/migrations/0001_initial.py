# -*- coding: utf-8 -*-
# Generated by Django 1.10.3 on 2017-09-13 10:04
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Action',
            fields=[
                ('action_id', models.AutoField(db_column='actionid', primary_key=True, serialize=False)),
                ('begin_datetime', models.DateTimeField(db_column='begindatetime')),
                ('begin_datetime_utc_offset', models.IntegerField(db_column='begindatetimeutcoffset')),
                ('end_datetime', models.DateTimeField(blank=True, db_column='enddatetime', null=True)),
                ('end_datetime_utc_offset', models.IntegerField(blank=True, db_column='enddatetimeutcoffset', null=True)),
                ('action_description', models.TextField(blank=True, db_column='actiondescription')),
                ('action_file_link', models.FileField(blank=True, db_column='actionfilelink', upload_to=b'')),
            ],
            options={
                'db_table': 'actions',
            },
        ),
        migrations.CreateModel(
            name='ActionAnnotation',
            fields=[
                ('bridge_id', models.AutoField(db_column='bridgeid', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'actionannotations',
            },
        ),
        migrations.CreateModel(
            name='ActionBy',
            fields=[
                ('bridge_id', models.AutoField(db_column='bridgeid', primary_key=True, serialize=False)),
                ('is_action_lead', models.BooleanField(db_column='isactionlead', default=None)),
                ('role_description', models.CharField(blank=True, db_column='roledescription', max_length=255)),
            ],
            options={
                'db_table': 'actionby',
            },
        ),
        migrations.CreateModel(
            name='ActionDirective',
            fields=[
                ('bridge_id', models.IntegerField(db_column='bridgeid', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'actiondirectives',
            },
        ),
        migrations.CreateModel(
            name='ActionExtensionPropertyValue',
            fields=[
                ('bridge_id', models.AutoField(db_column='bridgeid', primary_key=True, serialize=False)),
                ('property_value', models.CharField(db_column='propertyvalue', max_length=255)),
            ],
            options={
                'db_table': 'actionextensionpropertyvalues',
            },
        ),
        migrations.CreateModel(
            name='ActionType',
            fields=[
                ('term', models.CharField(db_column='term', max_length=255)),
                ('name', models.CharField(db_column='name', max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, db_column='definition', max_length=500)),
                ('category', models.CharField(blank=True, db_column='category', max_length=255)),
                ('source_vocabulary_uri', models.CharField(blank=True, db_column='sourcevocabularyuri', max_length=255)),
            ],
            options={
                'db_table': 'cv_actiontype',
            },
        ),
        migrations.CreateModel(
            name='Affiliation',
            fields=[
                ('affiliation_id', models.AutoField(db_column='affiliationid', primary_key=True, serialize=False)),
                ('is_primary_organization_contact', models.NullBooleanField(db_column='isprimaryorganizationcontact', default=None)),
                ('affiliation_start_date', models.DateField(db_column='affiliationstartdate')),
                ('affiliation_end_date', models.DateField(blank=True, db_column='affiliationenddate', null=True)),
                ('primary_phone', models.CharField(blank=True, db_column='primaryphone', max_length=50)),
                ('primary_email', models.CharField(db_column='primaryemail', max_length=255)),
                ('primary_address', models.CharField(blank=True, db_column='primaryaddress', max_length=255)),
                ('person_link', models.CharField(blank=True, db_column='personlink', max_length=255)),
            ],
            options={
                'db_table': 'affiliations',
            },
        ),
        migrations.CreateModel(
            name='AggregationStatistic',
            fields=[
                ('term', models.CharField(db_column='term', max_length=255)),
                ('name', models.CharField(db_column='name', max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, db_column='definition', max_length=500)),
                ('category', models.CharField(blank=True, db_column='category', max_length=255)),
                ('source_vocabulary_uri', models.CharField(blank=True, db_column='sourcevocabularyuri', max_length=255)),
            ],
            options={
                'db_table': 'cv_aggregationstatistic',
            },
        ),
        migrations.CreateModel(
            name='Annotation',
            fields=[
                ('annotation_id', models.AutoField(db_column='annotationid', primary_key=True, serialize=False)),
                ('annotation_code', models.CharField(blank=True, db_column='annotationcode', max_length=50)),
                ('annotation_text', models.CharField(db_column='annotationtext', max_length=500)),
                ('annotation_datetime', models.DateTimeField(blank=True, db_column='annotationdatetime', null=True)),
                ('annotation_utc_offset', models.IntegerField(blank=True, db_column='annotationutcoffset', null=True)),
                ('annotation_link', models.CharField(blank=True, db_column='annotationlink', max_length=255)),
            ],
            options={
                'db_table': 'annotations',
            },
        ),
        migrations.CreateModel(
            name='AnnotationType',
            fields=[
                ('term', models.CharField(db_column='term', max_length=255)),
                ('name', models.CharField(db_column='name', max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, db_column='definition', max_length=500)),
                ('category', models.CharField(blank=True, db_column='category', max_length=255)),
                ('source_vocabulary_uri', models.CharField(blank=True, db_column='sourcevocabularyuri', max_length=255)),
            ],
            options={
                'db_table': 'cv_annotationtype',
            },
        ),
        migrations.CreateModel(
            name='AuthorList',
            fields=[
                ('bridge_id', models.AutoField(db_column='bridgeid', primary_key=True, serialize=False)),
                ('author_order', models.IntegerField(db_column='authororder')),
            ],
            options={
                'db_table': 'authorlists',
            },
        ),
        migrations.CreateModel(
            name='CalibrationReferenceEquipment',
            fields=[
                ('bridge_id', models.AutoField(db_column='bridgeid', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'calibrationreferenceequipment',
            },
        ),
        migrations.CreateModel(
            name='CalibrationStandard',
            fields=[
                ('bridge_id', models.AutoField(db_column='bridgeid', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'calibrationstandards',
            },
        ),
        migrations.CreateModel(
            name='CategoricalResultValue',
            fields=[
                ('value_id', models.BigAutoField(db_column='valueid', primary_key=True, serialize=False)),
                ('value_datetime', models.DateTimeField(db_column='valuedatetime')),
                ('value_datetime_utc_offset', models.IntegerField(db_column='valuedatetimeutcoffset')),
                ('data_value', models.CharField(db_column='datavalue', max_length=255)),
            ],
            options={
                'db_table': 'categoricalresultvalues',
            },
        ),
        migrations.CreateModel(
            name='CategoricalResultValueAnnotation',
            fields=[
                ('bridge_id', models.AutoField(db_column='bridgeid', primary_key=True, serialize=False)),
                ('annotation', models.ForeignKey(db_column='annotationid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.Annotation')),
                ('value', models.ForeignKey(db_column='valueid', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.CategoricalResultValue')),
            ],
            options={
                'db_table': 'categoricalresultvalueannotations',
            },
        ),
        migrations.CreateModel(
            name='CensorCode',
            fields=[
                ('term', models.CharField(db_column='term', max_length=255)),
                ('name', models.CharField(db_column='name', max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, db_column='definition', max_length=500)),
                ('category', models.CharField(blank=True, db_column='category', max_length=255)),
                ('source_vocabulary_uri', models.CharField(blank=True, db_column='sourcevocabularyuri', max_length=255)),
            ],
            options={
                'db_table': 'cv_censorcode',
            },
        ),
        migrations.CreateModel(
            name='Citation',
            fields=[
                ('citation_id', models.AutoField(db_column='citationid', primary_key=True, serialize=False)),
                ('title', models.CharField(db_column='title', max_length=255)),
                ('publisher', models.CharField(db_column='publisher', max_length=255)),
                ('publication_year', models.IntegerField(db_column='publicationyear')),
                ('citation_link', models.CharField(blank=True, db_column='citationlink', max_length=255)),
            ],
            options={
                'db_table': 'citations',
            },
        ),
        migrations.CreateModel(
            name='CitationExtensionPropertyValue',
            fields=[
                ('bridge_id', models.AutoField(db_column='bridgeid', primary_key=True, serialize=False)),
                ('property_value', models.CharField(db_column='propertyvalue', max_length=255)),
                ('citation', models.ForeignKey(db_column='citationid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.Citation')),
            ],
            options={
                'db_table': 'citationextensionpropertyvalues',
            },
        ),
        migrations.CreateModel(
            name='CitationExternalIdentifier',
            fields=[
                ('bridge_id', models.AutoField(db_column='bridgeid', primary_key=True, serialize=False)),
                ('citation_external_identifier', models.CharField(db_column='citationexternalidentifier', max_length=255)),
                ('citation_external_identifier_uri', models.CharField(blank=True, db_column='citationexternalidentifieruri', max_length=255)),
                ('citation', models.ForeignKey(db_column='citationid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.Citation')),
            ],
            options={
                'db_table': 'citationexternalidentifiers',
            },
        ),
        migrations.CreateModel(
            name='DataLoggerFile',
            fields=[
                ('data_logger_file_id', models.AutoField(db_column='dataloggerfileid', primary_key=True, serialize=False)),
                ('data_logger_file_name', models.CharField(db_column='dataloggerfilename', max_length=255)),
                ('data_logger_file_description', models.CharField(blank=True, db_column='dataloggerfiledescription', max_length=500)),
                ('data_logger_file_link', models.FileField(blank=True, db_column='dataloggerfilelink', upload_to=b'')),
            ],
            options={
                'db_table': 'dataloggerfiles',
            },
        ),
        migrations.CreateModel(
            name='DataLoggerFileColumn',
            fields=[
                ('data_logger_file_column_id', models.AutoField(db_column='dataloggerfilecolumnid', primary_key=True, serialize=False)),
                ('column_label', models.CharField(db_column='columnlabel', max_length=50)),
                ('column_description', models.CharField(blank=True, db_column='columndescription', max_length=500)),
                ('measurement_equation', models.CharField(blank=True, db_column='measurementequation', max_length=255)),
                ('scan_interval', models.FloatField(blank=True, db_column='scaninterval', null=True)),
                ('recording_interval', models.FloatField(blank=True, db_column='recordinginterval', null=True)),
                ('aggregation_statistic', models.ForeignKey(blank=True, db_column='aggregationstatisticcv', on_delete=django.db.models.deletion.CASCADE, related_name='data_logger_file_columns', to='dataloader.AggregationStatistic')),
                ('data_logger_file', models.ForeignKey(db_column='dataloggerfileid', on_delete=django.db.models.deletion.CASCADE, related_name='data_logger_file_columns', to='dataloader.DataLoggerFile')),
            ],
            options={
                'db_table': 'dataloggerfilecolumns',
            },
        ),
        migrations.CreateModel(
            name='DataLoggerProgramFile',
            fields=[
                ('program_id', models.AutoField(db_column='programid', primary_key=True, serialize=False)),
                ('program_name', models.CharField(db_column='programname', max_length=255)),
                ('program_description', models.CharField(blank=True, db_column='programdescription', max_length=500)),
                ('program_version', models.CharField(blank=True, db_column='programversion', max_length=50)),
                ('program_file_link', models.FileField(blank=True, db_column='programfilelink', upload_to=b'')),
                ('affiliation', models.ForeignKey(db_column='affiliationid', on_delete=django.db.models.deletion.CASCADE, related_name='data_logger_programs', to='dataloader.Affiliation')),
            ],
            options={
                'db_table': 'dataloggerprogramfiles',
            },
        ),
        migrations.CreateModel(
            name='DataQuality',
            fields=[
                ('data_quality_id', models.AutoField(db_column='dataqualityid', primary_key=True, serialize=False)),
                ('data_quality_code', models.CharField(db_column='dataqualitycode', max_length=255)),
                ('data_quality_value', models.FloatField(blank=True, db_column='dataqualityvalue', null=True)),
                ('data_quality_description', models.CharField(blank=True, db_column='dataqualitydescription', max_length=500)),
                ('data_quality_link', models.CharField(blank=True, db_column='dataqualitylink', max_length=255)),
            ],
            options={
                'db_table': 'dataquality',
            },
        ),
        migrations.CreateModel(
            name='DataQualityType',
            fields=[
                ('term', models.CharField(db_column='term', max_length=255)),
                ('name', models.CharField(db_column='name', max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, db_column='definition', max_length=500)),
                ('category', models.CharField(blank=True, db_column='category', max_length=255)),
                ('source_vocabulary_uri', models.CharField(blank=True, db_column='sourcevocabularyuri', max_length=255)),
            ],
            options={
                'db_table': 'cv_dataqualitytype',
            },
        ),
        migrations.CreateModel(
            name='DataSet',
            fields=[
                ('data_set_id', models.AutoField(db_column='datasetid', primary_key=True, serialize=False)),
                ('data_set_uuid', models.UUIDField(db_column='datasetuuid', default=uuid.uuid4, editable=False)),
                ('data_set_code', models.CharField(db_column='datasetcode', max_length=50)),
                ('data_set_title', models.CharField(db_column='datasettitle', max_length=255)),
                ('data_set_abstract', models.CharField(db_column='datasetabstract', max_length=500)),
            ],
            options={
                'db_table': 'datasets',
            },
        ),
        migrations.CreateModel(
            name='DataSetCitation',
            fields=[
                ('bridge_id', models.AutoField(db_column='bridgeid', primary_key=True, serialize=False)),
                ('citation', models.ForeignKey(db_column='citationid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.Citation')),
                ('data_set', models.ForeignKey(db_column='datasetid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.DataSet')),
            ],
            options={
                'db_table': 'datasetcitations',
            },
        ),
        migrations.CreateModel(
            name='DataSetResult',
            fields=[
                ('bridge_id', models.AutoField(db_column='bridgeid', primary_key=True, serialize=False)),
                ('data_set', models.ForeignKey(db_column='datasetid', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.DataSet')),
            ],
            options={
                'db_table': 'datasetsresults',
            },
        ),
        migrations.CreateModel(
            name='DataSetType',
            fields=[
                ('term', models.CharField(db_column='term', max_length=255)),
                ('name', models.CharField(db_column='name', max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, db_column='definition', max_length=500)),
                ('category', models.CharField(blank=True, db_column='category', max_length=255)),
                ('source_vocabulary_uri', models.CharField(blank=True, db_column='sourcevocabularyuri', max_length=255)),
            ],
            options={
                'db_table': 'cv_datasettypecv',
            },
        ),
        migrations.CreateModel(
            name='DeploymentType',
            fields=[
                ('term', models.CharField(db_column='term', max_length=255)),
                ('name', models.CharField(db_column='name', max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, db_column='definition', max_length=500)),
                ('category', models.CharField(blank=True, db_column='category', max_length=255)),
                ('source_vocabulary_uri', models.CharField(blank=True, db_column='sourcevocabularyuri', max_length=255)),
            ],
            options={
                'db_table': 'cv_deploymenttype',
            },
        ),
        migrations.CreateModel(
            name='DerivationEquation',
            fields=[
                ('derivation_equation_id', models.AutoField(db_column='derivationequationid', primary_key=True, serialize=False)),
                ('derivation_equation', models.CharField(db_column='derivationequation', max_length=255)),
            ],
            options={
                'db_table': 'derivationequations',
            },
        ),
        migrations.CreateModel(
            name='Directive',
            fields=[
                ('directive_id', models.AutoField(db_column='directiveid', primary_key=True, serialize=False)),
                ('directive_description', models.CharField(db_column='directivedescription', max_length=500)),
            ],
            options={
                'db_table': 'directives',
            },
        ),
        migrations.CreateModel(
            name='DirectiveType',
            fields=[
                ('term', models.CharField(db_column='term', max_length=255)),
                ('name', models.CharField(db_column='name', max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, db_column='definition', max_length=500)),
                ('category', models.CharField(blank=True, db_column='category', max_length=255)),
                ('source_vocabulary_uri', models.CharField(blank=True, db_column='sourcevocabularyuri', max_length=255)),
            ],
            options={
                'db_table': 'cv_directivetype',
            },
        ),
        migrations.CreateModel(
            name='ElevationDatum',
            fields=[
                ('term', models.CharField(db_column='term', max_length=255)),
                ('name', models.CharField(db_column='name', max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, db_column='definition', max_length=500)),
                ('category', models.CharField(blank=True, db_column='category', max_length=255)),
                ('source_vocabulary_uri', models.CharField(blank=True, db_column='sourcevocabularyuri', max_length=255)),
            ],
            options={
                'db_table': 'cv_elevationdatum',
            },
        ),
        migrations.CreateModel(
            name='Equipment',
            fields=[
                ('equipment_id', models.AutoField(db_column='equipmentid', primary_key=True, serialize=False)),
                ('equipment_code', models.CharField(db_column='equipmentcode', max_length=50)),
                ('equipment_name', models.CharField(db_column='equipmentname', max_length=255)),
                ('equipment_serial_number', models.CharField(db_column='equipmentserialnumber', max_length=50)),
                ('equipment_purchase_date', models.DateTimeField(db_column='equipmentpurchasedate')),
                ('equipment_purchase_order_number', models.CharField(blank=True, db_column='equipmentpurchaseordernumber', max_length=50)),
                ('equipment_description', models.CharField(blank=True, db_column='equipmentdescription', max_length=500)),
                ('equipment_documentation_link', models.FileField(blank=True, db_column='equipmentdocumentationlink', upload_to=b'')),
            ],
            options={
                'db_table': 'equipment',
            },
        ),
        migrations.CreateModel(
            name='EquipmentAnnotation',
            fields=[
                ('bridge_id', models.AutoField(db_column='bridgeid', primary_key=True, serialize=False)),
                ('annotation', models.ForeignKey(db_column='annotationid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.Annotation')),
                ('equipment', models.ForeignKey(db_column='equipmentid', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.Equipment')),
            ],
            options={
                'db_table': 'equipmentannotations',
            },
        ),
        migrations.CreateModel(
            name='EquipmentModel',
            fields=[
                ('equipment_model_id', models.AutoField(db_column='equipmentmodelid', primary_key=True, serialize=False)),
                ('model_part_number', models.CharField(blank=True, db_column='modelpartnumber', max_length=50)),
                ('model_name', models.CharField(db_column='modelname', max_length=255)),
                ('model_description', models.CharField(blank=True, db_column='modeldescription', max_length=500)),
                ('is_instrument', models.BooleanField(db_column='isinstrument', default=None)),
                ('model_specifications_file_link', models.FileField(blank=True, db_column='modelspecificationsfilelink', upload_to=b'')),
                ('model_link', models.CharField(blank=True, db_column='modellink', max_length=255)),
            ],
            options={
                'db_table': 'equipmentmodels',
            },
        ),
        migrations.CreateModel(
            name='EquipmentType',
            fields=[
                ('term', models.CharField(db_column='term', max_length=255)),
                ('name', models.CharField(db_column='name', max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, db_column='definition', max_length=500)),
                ('category', models.CharField(blank=True, db_column='category', max_length=255)),
                ('source_vocabulary_uri', models.CharField(blank=True, db_column='sourcevocabularyuri', max_length=255)),
            ],
            options={
                'db_table': 'cv_equipmenttype',
            },
        ),
        migrations.CreateModel(
            name='EquipmentUsed',
            fields=[
                ('bridge_id', models.AutoField(db_column='bridgeid', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'equipmentused',
            },
        ),
        migrations.CreateModel(
            name='ExtensionProperty',
            fields=[
                ('property_id', models.AutoField(db_column='propertyid', primary_key=True, serialize=False)),
                ('property_name', models.CharField(db_column='propertyname', max_length=255)),
                ('property_description', models.CharField(blank=True, db_column='propertydescription', max_length=500)),
            ],
            options={
                'db_table': 'extensionproperties',
            },
        ),
        migrations.CreateModel(
            name='ExternalIdentifierSystem',
            fields=[
                ('external_identifier_system_id', models.AutoField(db_column='externalidentifiersystemid', primary_key=True, serialize=False)),
                ('external_identifier_system_name', models.CharField(db_column='externalidentifiersystemname', max_length=255)),
                ('external_identifier_system_description', models.CharField(blank=True, db_column='externalidentifiersystemdescription', max_length=500)),
                ('external_identifier_system_url', models.CharField(blank=True, db_column='externalidentifiersystemurl', max_length=255)),
            ],
            options={
                'db_table': 'externalidentifiersystems',
            },
        ),
        migrations.CreateModel(
            name='FeatureAction',
            fields=[
                ('feature_action_id', models.AutoField(db_column='featureactionid', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'featureactions',
            },
        ),
        migrations.CreateModel(
            name='InstrumentOutputVariable',
            fields=[
                ('instrument_output_variable_id', models.AutoField(db_column='instrumentoutputvariableid', primary_key=True, serialize=False)),
                ('instrument_resolution', models.CharField(blank=True, db_column='instrumentresolution', max_length=255)),
                ('instrument_accuracy', models.CharField(blank=True, db_column='instrumentaccuracy', max_length=255)),
            ],
            options={
                'db_table': 'instrumentoutputvariables',
            },
        ),
        migrations.CreateModel(
            name='MeasurementResultValue',
            fields=[
                ('value_id', models.BigAutoField(db_column='valueid', primary_key=True, serialize=False)),
                ('value_datetime', models.DateTimeField(db_column='valuedatetime')),
                ('value_datetime_utc_offset', models.IntegerField(db_column='valuedatetimeutcoffset')),
                ('data_value', models.FloatField(db_column='datavalue')),
            ],
            options={
                'db_table': 'measurementresultvalues',
            },
        ),
        migrations.CreateModel(
            name='MeasurementResultValueAnnotation',
            fields=[
                ('bridge_id', models.AutoField(db_column='bridgeid', primary_key=True, serialize=False)),
                ('annotation', models.ForeignKey(db_column='annotationid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.Annotation')),
                ('value', models.ForeignKey(db_column='valueid', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.MeasurementResultValue')),
            ],
            options={
                'db_table': 'measurementresultvalueannotations',
            },
        ),
        migrations.CreateModel(
            name='Medium',
            fields=[
                ('term', models.CharField(db_column='term', max_length=255)),
                ('name', models.CharField(db_column='name', max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, db_column='definition', max_length=500)),
                ('category', models.CharField(blank=True, db_column='category', max_length=255)),
                ('source_vocabulary_uri', models.CharField(blank=True, db_column='sourcevocabularyuri', max_length=255)),
            ],
            options={
                'db_table': 'cv_medium',
            },
        ),
        migrations.CreateModel(
            name='Method',
            fields=[
                ('method_id', models.AutoField(db_column='methodid', primary_key=True, serialize=False)),
                ('method_code', models.CharField(db_column='methodcode', max_length=50)),
                ('method_name', models.CharField(db_column='methodname', max_length=255)),
                ('method_description', models.CharField(blank=True, db_column='methoddescription', max_length=500)),
                ('method_link', models.CharField(blank=True, db_column='methodlink', max_length=255)),
            ],
            options={
                'db_table': 'methods',
            },
        ),
        migrations.CreateModel(
            name='MethodAnnotation',
            fields=[
                ('bridge_id', models.AutoField(db_column='bridgeid', primary_key=True, serialize=False)),
                ('annotation', models.ForeignKey(db_column='annotationid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.Annotation')),
                ('method', models.ForeignKey(db_column='methodid', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.Method')),
            ],
            options={
                'db_table': 'methodannotations',
            },
        ),
        migrations.CreateModel(
            name='MethodCitation',
            fields=[
                ('bridge_id', models.AutoField(db_column='bridgeid', primary_key=True, serialize=False)),
                ('citation', models.ForeignKey(db_column='citationid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.Citation')),
                ('method', models.ForeignKey(db_column='methodid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.Method')),
            ],
            options={
                'db_table': 'methodcitations',
            },
        ),
        migrations.CreateModel(
            name='MethodExtensionPropertyValue',
            fields=[
                ('bridge_id', models.AutoField(db_column='bridgeid', primary_key=True, serialize=False)),
                ('property_value', models.CharField(db_column='propertyvalue', max_length=255)),
                ('method', models.ForeignKey(db_column='methodid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.Method')),
                ('property', models.ForeignKey(db_column='propertyid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.ExtensionProperty')),
            ],
            options={
                'db_table': 'methodextensionpropertyvalues',
            },
        ),
        migrations.CreateModel(
            name='MethodExternalIdentifier',
            fields=[
                ('bridge_id', models.AutoField(db_column='bridgeid', primary_key=True, serialize=False)),
                ('method_external_identifier', models.CharField(db_column='methodexternalidentifier', max_length=255)),
                ('method_external_identifier_uri', models.CharField(blank=True, db_column='methodexternalidentifieruri', max_length=255)),
                ('external_identifier_system', models.ForeignKey(db_column='externalidentifiersystemid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.ExternalIdentifierSystem')),
                ('method', models.ForeignKey(db_column='methodid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.Method')),
            ],
            options={
                'db_table': 'methodexternalidentifiers',
            },
        ),
        migrations.CreateModel(
            name='MethodType',
            fields=[
                ('term', models.CharField(db_column='term', max_length=255)),
                ('name', models.CharField(db_column='name', max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, db_column='definition', max_length=500)),
                ('category', models.CharField(blank=True, db_column='category', max_length=255)),
                ('source_vocabulary_uri', models.CharField(blank=True, db_column='sourcevocabularyuri', max_length=255)),
            ],
            options={
                'db_table': 'cv_methodtype',
            },
        ),
        migrations.CreateModel(
            name='Model',
            fields=[
                ('model_id', models.AutoField(db_column='modelid', primary_key=True, serialize=False)),
                ('model_code', models.CharField(db_column='modelcode', max_length=255)),
                ('model_name', models.CharField(db_column='modelname', max_length=255)),
                ('model_description', models.CharField(blank=True, db_column='modeldescription', max_length=500)),
                ('version', models.CharField(blank=True, db_column='version', max_length=255)),
                ('model_link', models.CharField(blank=True, db_column='modellink', max_length=255)),
            ],
            options={
                'db_table': 'models',
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('organization_id', models.AutoField(db_column='organizationid', primary_key=True, serialize=False)),
                ('organization_code', models.CharField(db_column='organizationcode', max_length=50, unique=True)),
                ('organization_name', models.CharField(db_column='organizationname', max_length=255)),
                ('organization_description', models.CharField(blank=True, db_column='organizationdescription', max_length=500)),
                ('organization_link', models.CharField(blank=True, db_column='organizationlink', max_length=255)),
            ],
            options={
                'db_table': 'organizations',
            },
        ),
        migrations.CreateModel(
            name='OrganizationType',
            fields=[
                ('term', models.CharField(db_column='term', max_length=255)),
                ('name', models.CharField(db_column='name', max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, db_column='definition', max_length=500)),
                ('category', models.CharField(blank=True, db_column='category', max_length=255)),
                ('source_vocabulary_uri', models.CharField(blank=True, db_column='sourcevocabularyuri', max_length=255)),
            ],
            options={
                'db_table': 'cv_organizationtype',
            },
        ),
        migrations.CreateModel(
            name='People',
            fields=[
                ('person_id', models.AutoField(db_column='personid', primary_key=True, serialize=False)),
                ('person_first_name', models.CharField(db_column='personfirstname', max_length=255)),
                ('person_middle_name', models.CharField(blank=True, db_column='personmiddlename', max_length=255)),
                ('person_last_name', models.CharField(db_column='personlastname', max_length=255)),
                ('citations', models.ManyToManyField(related_name='cited_authors', through='dataloader.AuthorList', to='dataloader.Citation')),
            ],
            options={
                'db_table': 'people',
            },
        ),
        migrations.CreateModel(
            name='PersonExternalIdentifier',
            fields=[
                ('bridge_id', models.AutoField(db_column='bridgeid', primary_key=True, serialize=False)),
                ('person_external_identifier', models.CharField(db_column='personexternalidentifier', max_length=255)),
                ('person_external_identifier_uri', models.CharField(blank=True, db_column='personexternalidentifieruri', max_length=255)),
                ('external_identifier_system', models.ForeignKey(db_column='externalidentifiersystemid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.ExternalIdentifierSystem')),
                ('person', models.ForeignKey(db_column='personid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.People')),
            ],
            options={
                'db_table': 'personexternalidentifiers',
            },
        ),
        migrations.CreateModel(
            name='PointCoverageResultValue',
            fields=[
                ('value_id', models.BigAutoField(db_column='valueid', primary_key=True, serialize=False)),
                ('value_datetime', models.DateTimeField(db_column='valuedatetime')),
                ('value_datetime_utc_offset', models.IntegerField(db_column='valuedatetimeutcoffset')),
                ('x_location', models.FloatField(db_column='xlocation')),
                ('y_location', models.FloatField(db_column='ylocation')),
                ('data_value', models.BigIntegerField(db_column='datavalue')),
            ],
            options={
                'db_table': 'pointcoverageresultvalues',
            },
        ),
        migrations.CreateModel(
            name='PointCoverageResultValueAnnotation',
            fields=[
                ('bridge_id', models.AutoField(db_column='bridgeid', primary_key=True, serialize=False)),
                ('annotation', models.ForeignKey(db_column='annotationid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.Annotation')),
                ('value', models.ForeignKey(db_column='valueid', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.PointCoverageResultValue')),
            ],
            options={
                'db_table': 'pointcoverageresultvalueannotations',
            },
        ),
        migrations.CreateModel(
            name='ProcessingLevel',
            fields=[
                ('processing_level_id', models.AutoField(db_column='processinglevelid', primary_key=True, serialize=False)),
                ('processing_level_code', models.CharField(db_column='processinglevelcode', max_length=50)),
                ('definition', models.CharField(blank=True, db_column='definition', max_length=500)),
                ('explanation', models.CharField(blank=True, db_column='explanation', max_length=500)),
            ],
            options={
                'db_table': 'processinglevels',
            },
        ),
        migrations.CreateModel(
            name='ProfileResultValue',
            fields=[
                ('value_id', models.BigAutoField(db_column='valueid', primary_key=True, serialize=False)),
                ('value_datetime', models.DateTimeField(db_column='valuedatetime')),
                ('value_datetime_utc_offset', models.IntegerField(db_column='valuedatetimeutcoffset')),
                ('time_aggregation_interval', models.FloatField(db_column='timeaggregationinterval')),
                ('z_location', models.FloatField(db_column='zlocation')),
                ('data_value', models.FloatField(db_column='datavalue')),
                ('z_aggregation_interval', models.FloatField(db_column='zaggregationinterval')),
            ],
            options={
                'db_table': 'profileresultvalues',
            },
        ),
        migrations.CreateModel(
            name='ProfileResultValueAnnotation',
            fields=[
                ('bridge_id', models.AutoField(db_column='bridgeid', primary_key=True, serialize=False)),
                ('annotation', models.ForeignKey(db_column='annotationid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.Annotation')),
                ('value', models.ForeignKey(db_column='valueid', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.ProfileResultValue')),
            ],
            options={
                'db_table': 'profileresultvalueannotations',
            },
        ),
        migrations.CreateModel(
            name='PropertyDataType',
            fields=[
                ('term', models.CharField(db_column='term', max_length=255)),
                ('name', models.CharField(db_column='name', max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, db_column='definition', max_length=500)),
                ('category', models.CharField(blank=True, db_column='category', max_length=255)),
                ('source_vocabulary_uri', models.CharField(blank=True, db_column='sourcevocabularyuri', max_length=255)),
            ],
            options={
                'db_table': 'cv_propertydatatype',
            },
        ),
        migrations.CreateModel(
            name='QualityCode',
            fields=[
                ('term', models.CharField(db_column='term', max_length=255)),
                ('name', models.CharField(db_column='name', max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, db_column='definition', max_length=500)),
                ('category', models.CharField(blank=True, db_column='category', max_length=255)),
                ('source_vocabulary_uri', models.CharField(blank=True, db_column='sourcevocabularyuri', max_length=255)),
            ],
            options={
                'db_table': 'cv_qualitycode',
            },
        ),
        migrations.CreateModel(
            name='ReferenceMaterial',
            fields=[
                ('reference_material_id', models.AutoField(db_column='referencematerialid', primary_key=True, serialize=False)),
                ('reference_material_code', models.CharField(db_column='referencematerialcode', max_length=50)),
                ('reference_material_lot_code', models.CharField(blank=True, db_column='referencemateriallotcode', max_length=255)),
                ('reference_material_purchase_date', models.DateTimeField(blank=True, db_column='referencematerialpurchasedate', null=True)),
                ('reference_material_expiration_date', models.DateTimeField(blank=True, db_column='referencematerialexpirationdate', null=True)),
                ('reference_material_certificate_link', models.FileField(blank=True, db_column='referencematerialcertificatelink', upload_to=b'')),
            ],
            options={
                'db_table': 'referencematerials',
            },
        ),
        migrations.CreateModel(
            name='ReferenceMaterialExternalIdentifier',
            fields=[
                ('bridge_id', models.AutoField(db_column='bridgeid', primary_key=True, serialize=False)),
                ('reference_material_external_identifier', models.CharField(db_column='referencematerialexternalidentifier', max_length=255)),
                ('reference_material_external_identifier_uri', models.CharField(blank=True, db_column='referencematerialexternalidentifieruri', max_length=255)),
                ('external_identifier_system', models.ForeignKey(db_column='externalidentifiersystemid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.ExternalIdentifierSystem')),
                ('reference_material', models.ForeignKey(db_column='referencematerialid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.ReferenceMaterial')),
            ],
            options={
                'db_table': 'referencematerialexternalidentifiers',
            },
        ),
        migrations.CreateModel(
            name='ReferenceMaterialMedium',
            fields=[
                ('term', models.CharField(db_column='term', max_length=255)),
                ('name', models.CharField(db_column='name', max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, db_column='definition', max_length=500)),
                ('category', models.CharField(blank=True, db_column='category', max_length=255)),
                ('source_vocabulary_uri', models.CharField(blank=True, db_column='sourcevocabularyuri', max_length=255)),
            ],
            options={
                'db_table': 'cv_referencematerialmedium',
            },
        ),
        migrations.CreateModel(
            name='ReferenceMaterialValue',
            fields=[
                ('reference_material_value_id', models.AutoField(db_column='referencematerialvalueid', primary_key=True, serialize=False)),
                ('reference_material_value', models.FloatField(db_column='referencematerialvalue')),
                ('reference_material_accuracy', models.FloatField(blank=True, db_column='referencematerialaccuracy', null=True)),
                ('citation', models.ForeignKey(blank=True, db_column='citationid', null=True, on_delete=django.db.models.deletion.CASCADE, to='dataloader.Citation')),
                ('reference_material', models.ForeignKey(db_column='referencematerialid', on_delete=django.db.models.deletion.CASCADE, related_name='referencematerialvalue', to='dataloader.ReferenceMaterial')),
            ],
            options={
                'db_table': 'referencematerialvalues',
            },
        ),
        migrations.CreateModel(
            name='RelatedAction',
            fields=[
                ('relation_id', models.AutoField(db_column='relationid', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'relatedactions',
            },
        ),
        migrations.CreateModel(
            name='RelatedAnnotation',
            fields=[
                ('relation_id', models.AutoField(db_column='relationid', primary_key=True, serialize=False)),
                ('annotation', models.ForeignKey(db_column='annotationid', on_delete=django.db.models.deletion.CASCADE, related_name='related_annonation__annotation', to='dataloader.Annotation')),
                ('related_annotation', models.ForeignKey(db_column='relatedannotationid', on_delete=django.db.models.deletion.CASCADE, related_name='related_annotation__related_annontation', to='dataloader.Annotation')),
            ],
            options={
                'db_table': 'relatedannotations',
            },
        ),
        migrations.CreateModel(
            name='RelatedDataSet',
            fields=[
                ('relation_id', models.AutoField(db_column='relationid', primary_key=True, serialize=False)),
                ('version_code', models.CharField(blank=True, db_column='versioncode', max_length=50)),
                ('data_set', models.ForeignKey(db_column='datasetid', on_delete=django.db.models.deletion.CASCADE, related_name='related_dataset__dataset', to='dataloader.DataSet')),
                ('related_data_set', models.ForeignKey(db_column='relateddatasetid', on_delete=django.db.models.deletion.CASCADE, related_name='related_dataset__related_dataset', to='dataloader.DataSet')),
            ],
            options={
                'db_table': 'relateddatasets',
            },
        ),
        migrations.CreateModel(
            name='RelatedEquipment',
            fields=[
                ('relation_id', models.AutoField(db_column='relationid', primary_key=True, serialize=False)),
                ('relationship_start_datetime', models.DateTimeField(db_column='relationshipstartdatetime')),
                ('relationship_start_datetime_utc_offset', models.IntegerField(db_column='relationshipstartdatetimeutcoffset')),
                ('relationship_end_datetime', models.DateTimeField(blank=True, db_column='relationshipenddatetime', null=True)),
                ('relationship_end_datetime_utc_offset', models.IntegerField(blank=True, db_column='relationshipenddatetimeutcoffset', null=True)),
                ('equipment', models.ForeignKey(db_column='equipmentid', on_delete=django.db.models.deletion.CASCADE, related_name='related_equipment', to='dataloader.Equipment')),
                ('related_equipment', models.ForeignKey(db_column='relatedequipmentid', on_delete=django.db.models.deletion.CASCADE, related_name='reverse_related_equipment', to='dataloader.Equipment')),
            ],
            options={
                'db_table': 'relatedequipment',
            },
        ),
        migrations.CreateModel(
            name='RelatedFeature',
            fields=[
                ('relation_id', models.AutoField(db_column='relationid', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'relatedfeatures',
            },
        ),
        migrations.CreateModel(
            name='RelatedModel',
            fields=[
                ('relation_id', models.AutoField(db_column='relationid', primary_key=True, serialize=False)),
                ('model', models.ForeignKey(db_column='modelid', on_delete=django.db.models.deletion.CASCADE, related_name='related_model__model', to='dataloader.Model')),
                ('related_model', models.ForeignKey(db_column='relatedmodelid', on_delete=django.db.models.deletion.CASCADE, related_name='related_model__related_model', to='dataloader.Model')),
            ],
            options={
                'db_table': 'relatedmodels',
            },
        ),
        migrations.CreateModel(
            name='RelatedResult',
            fields=[
                ('relation_id', models.AutoField(db_column='relationid', primary_key=True, serialize=False)),
                ('version_code', models.CharField(blank=True, db_column='versioncode', max_length=50)),
                ('related_result_sequence_number', models.IntegerField(blank=True, db_column='relatedresultsequencenumber', null=True)),
            ],
            options={
                'db_table': 'relatedresults',
            },
        ),
        migrations.CreateModel(
            name='RelationshipType',
            fields=[
                ('term', models.CharField(db_column='term', max_length=255)),
                ('name', models.CharField(db_column='name', max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, db_column='definition', max_length=500)),
                ('category', models.CharField(blank=True, db_column='category', max_length=255)),
                ('source_vocabulary_uri', models.CharField(blank=True, db_column='sourcevocabularyuri', max_length=255)),
            ],
            options={
                'db_table': 'cv_relationshiptype',
            },
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('result_id', models.AutoField(db_column='resultid', primary_key=True, serialize=False)),
                ('result_uuid', models.UUIDField(db_column='resultuuid', default=uuid.uuid4, editable=False)),
                ('result_datetime', models.DateTimeField(blank=True, db_column='resultdatetime', null=True)),
                ('result_datetime_utc_offset', models.BigIntegerField(blank=True, db_column='resultdatetimeutcoffset', null=True)),
                ('valid_datetime', models.DateTimeField(blank=True, db_column='validdatetime', null=True)),
                ('valid_datetime_utc_offset', models.BigIntegerField(blank=True, db_column='validdatetimeutcoffset', null=True)),
                ('value_count', models.IntegerField(db_column='valuecount', default=0)),
            ],
            options={
                'db_table': 'results',
            },
        ),
        migrations.CreateModel(
            name='ResultAnnotation',
            fields=[
                ('bridge_id', models.AutoField(db_column='bridgeid', primary_key=True, serialize=False)),
                ('begin_datetime', models.DateTimeField(db_column='begindatetime')),
                ('end_datetime', models.DateTimeField(db_column='enddatetime')),
                ('annotation', models.ForeignKey(db_column='annotationid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.Annotation')),
            ],
            options={
                'db_table': 'resultannotations',
            },
        ),
        migrations.CreateModel(
            name='ResultDataQuality',
            fields=[
                ('bridge_id', models.AutoField(db_column='bridgeid', primary_key=True, serialize=False)),
                ('data_quality', models.ForeignKey(db_column='dataqualityid', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.DataQuality')),
            ],
            options={
                'db_table': 'resultsdataquality',
            },
        ),
        migrations.CreateModel(
            name='ResultExtensionPropertyValue',
            fields=[
                ('bridge_id', models.AutoField(db_column='bridgeid', primary_key=True, serialize=False)),
                ('property_value', models.CharField(db_column='propertyvalue', max_length=255)),
                ('property', models.ForeignKey(db_column='propertyid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.ExtensionProperty')),
            ],
            options={
                'db_table': 'resultextensionpropertyvalues',
            },
        ),
        migrations.CreateModel(
            name='ResultType',
            fields=[
                ('term', models.CharField(db_column='term', max_length=255)),
                ('name', models.CharField(db_column='name', max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, db_column='definition', max_length=500)),
                ('category', models.CharField(blank=True, db_column='category', max_length=255)),
                ('source_vocabulary_uri', models.CharField(blank=True, db_column='sourcevocabularyuri', max_length=255)),
            ],
            options={
                'db_table': 'cv_resulttype',
            },
        ),
        migrations.CreateModel(
            name='SamplingFeature',
            fields=[
                ('sampling_feature_id', models.AutoField(db_column='samplingfeatureid', primary_key=True, serialize=False)),
                ('sampling_feature_uuid', models.UUIDField(db_column='samplingfeatureuuid', default=uuid.uuid4, editable=False)),
                ('sampling_feature_code', models.CharField(db_column='samplingfeaturecode', max_length=50, unique=True)),
                ('sampling_feature_name', models.CharField(blank=True, db_column='samplingfeaturename', max_length=255)),
                ('sampling_feature_description', models.CharField(blank=True, db_column='samplingfeaturedescription', max_length=500)),
                ('elevation_m', models.FloatField(blank=True, db_column='elevation_m', null=True)),
                ('feature_geometry', models.BinaryField(blank=True, db_column='featuregeometry', null=True)),
            ],
            options={
                'db_table': 'samplingfeatures',
            },
        ),
        migrations.CreateModel(
            name='SamplingFeatureAnnotation',
            fields=[
                ('bridge_id', models.AutoField(db_column='bridgeid', primary_key=True, serialize=False)),
                ('annotation', models.ForeignKey(db_column='annotationid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.Annotation')),
            ],
            options={
                'db_table': 'samplingfeatureannotations',
            },
        ),
        migrations.CreateModel(
            name='SamplingFeatureExtensionPropertyValue',
            fields=[
                ('bridge_id', models.AutoField(db_column='bridgeid', primary_key=True, serialize=False)),
                ('property_value', models.CharField(db_column='propertyvalue', max_length=255)),
                ('property', models.ForeignKey(db_column='propertyid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.ExtensionProperty')),
            ],
            options={
                'db_table': 'samplingfeatureextensionpropertyvalues',
            },
        ),
        migrations.CreateModel(
            name='SamplingFeatureExternalIdentifier',
            fields=[
                ('bridge_id', models.AutoField(db_column='bridgeid', primary_key=True, serialize=False)),
                ('sampling_feature_external_identifier', models.CharField(db_column='samplingfeatureexternalidentifier', max_length=255)),
                ('sampling_feature_external_identifier_uri', models.CharField(blank=True, db_column='samplingfeatureexternalidentifieruri', max_length=255)),
                ('external_identifier_system', models.ForeignKey(db_column='externalidentifiersystemid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.ExternalIdentifierSystem')),
            ],
            options={
                'db_table': 'samplingfeatureexternalidentifiers',
            },
        ),
        migrations.CreateModel(
            name='SamplingFeatureGeoType',
            fields=[
                ('term', models.CharField(db_column='term', max_length=255)),
                ('name', models.CharField(db_column='name', max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, db_column='definition', max_length=500)),
                ('category', models.CharField(blank=True, db_column='category', max_length=255)),
                ('source_vocabulary_uri', models.CharField(blank=True, db_column='sourcevocabularyuri', max_length=255)),
            ],
            options={
                'db_table': 'cv_samplingfeaturegeotype',
            },
        ),
        migrations.CreateModel(
            name='SamplingFeatureType',
            fields=[
                ('term', models.CharField(db_column='term', max_length=255)),
                ('name', models.CharField(db_column='name', max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, db_column='definition', max_length=500)),
                ('category', models.CharField(blank=True, db_column='category', max_length=255)),
                ('source_vocabulary_uri', models.CharField(blank=True, db_column='sourcevocabularyuri', max_length=255)),
            ],
            options={
                'db_table': 'cv_samplingfeaturetype',
            },
        ),
        migrations.CreateModel(
            name='SectionResultValue',
            fields=[
                ('value_id', models.BigAutoField(db_column='valueid', primary_key=True, serialize=False)),
                ('value_datetime', models.DateTimeField(db_column='valuedatetime')),
                ('value_datetime_utc_offset', models.IntegerField(db_column='valuedatetimeutcoffset')),
                ('time_aggregation_interval', models.FloatField(db_column='timeaggregationinterval')),
                ('x_location', models.FloatField(db_column='xlocation')),
                ('z_location', models.FloatField(db_column='zlocation')),
                ('data_value', models.FloatField(db_column='datavalue')),
                ('x_aggregation_interval', models.FloatField(db_column='xaggregationinterval')),
                ('z_aggregation_interval', models.FloatField(db_column='zaggregationinterval')),
                ('aggregation_statistic', models.ForeignKey(db_column='aggregationstatisticcv', on_delete=django.db.models.deletion.CASCADE, to='dataloader.AggregationStatistic')),
            ],
            options={
                'db_table': 'sectionresultvalues',
            },
        ),
        migrations.CreateModel(
            name='SectionResultValueAnnotation',
            fields=[
                ('bridge_id', models.AutoField(db_column='bridgeid', primary_key=True, serialize=False)),
                ('annotation', models.ForeignKey(db_column='annotationid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.Annotation')),
                ('value', models.ForeignKey(db_column='valueid', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.SectionResultValue')),
            ],
            options={
                'db_table': 'sectionresultvalueannotations',
            },
        ),
        migrations.CreateModel(
            name='Simulation',
            fields=[
                ('simulation_id', models.AutoField(db_column='simulationid', primary_key=True, serialize=False)),
                ('simulation_name', models.CharField(db_column='simulationname', max_length=255)),
                ('simulation_description', models.CharField(blank=True, db_column='simulationdescription', max_length=500)),
                ('simulation_start_datetime', models.DateTimeField(db_column='simulationstartdatetime')),
                ('simulation_start_datetime_utc_offset', models.IntegerField(db_column='simulationstartdatetimeutcoffset')),
                ('simulation_end_datetime', models.DateTimeField(db_column='simulationenddatetime')),
                ('simulation_end_datetime_utc_offset', models.IntegerField(db_column='simulationenddatetimeutcoffset')),
                ('time_step_value', models.FloatField(db_column='timestepvalue')),
            ],
            options={
                'db_table': 'simulations',
            },
        ),
        migrations.CreateModel(
            name='SiteType',
            fields=[
                ('term', models.CharField(db_column='term', max_length=255)),
                ('name', models.CharField(db_column='name', max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, db_column='definition', max_length=500)),
                ('category', models.CharField(blank=True, db_column='category', max_length=255)),
                ('source_vocabulary_uri', models.CharField(blank=True, db_column='sourcevocabularyuri', max_length=255)),
            ],
            options={
                'db_table': 'cv_sitetype',
            },
        ),
        migrations.CreateModel(
            name='SpatialOffset',
            fields=[
                ('spatial_offset_id', models.AutoField(db_column='spatialoffsetid', primary_key=True, serialize=False)),
                ('offset_1_value', models.FloatField(db_column='offset1value')),
                ('offset_2_value', models.FloatField(blank=True, db_column='offset2value', null=True)),
                ('offset_3_value', models.FloatField(blank=True, db_column='offset3value', null=True)),
            ],
            options={
                'db_table': 'spatialoffsets',
            },
        ),
        migrations.CreateModel(
            name='SpatialOffsetType',
            fields=[
                ('term', models.CharField(db_column='term', max_length=255)),
                ('name', models.CharField(db_column='name', max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, db_column='definition', max_length=500)),
                ('category', models.CharField(blank=True, db_column='category', max_length=255)),
                ('source_vocabulary_uri', models.CharField(blank=True, db_column='sourcevocabularyuri', max_length=255)),
            ],
            options={
                'db_table': 'cv_spatialoffsettype',
            },
        ),
        migrations.CreateModel(
            name='SpatialReference',
            fields=[
                ('spatial_reference_id', models.AutoField(db_column='spatialreferenceid', primary_key=True, serialize=False)),
                ('srs_code', models.CharField(blank=True, db_column='srscode', max_length=50)),
                ('srs_name', models.CharField(db_column='srsname', max_length=255)),
                ('srs_description', models.CharField(blank=True, db_column='srsdescription', max_length=500)),
                ('srs_link', models.CharField(blank=True, db_column='srslink', max_length=255)),
            ],
            options={
                'db_table': 'spatialreferences',
            },
        ),
        migrations.CreateModel(
            name='SpatialReferenceExternalIdentifier',
            fields=[
                ('bridge_id', models.AutoField(db_column='bridgeid', primary_key=True, serialize=False)),
                ('spatial_reference_external_identifier', models.CharField(db_column='spatialreferenceexternalidentifier', max_length=255)),
                ('spatial_reference_external_identifier_uri', models.CharField(blank=True, db_column='spatialreferenceexternalidentifieruri', max_length=255)),
                ('external_identifier_system', models.ForeignKey(db_column='externalidentifiersystemid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.ExternalIdentifierSystem')),
                ('spatial_reference', models.ForeignKey(db_column='spatialreferenceid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.SpatialReference')),
            ],
            options={
                'db_table': 'spatialreferenceexternalidentifiers',
            },
        ),
        migrations.CreateModel(
            name='Speciation',
            fields=[
                ('term', models.CharField(db_column='term', max_length=255)),
                ('name', models.CharField(db_column='name', max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, db_column='definition', max_length=500)),
                ('category', models.CharField(blank=True, db_column='category', max_length=255)),
                ('source_vocabulary_uri', models.CharField(blank=True, db_column='sourcevocabularyuri', max_length=255)),
            ],
            options={
                'db_table': 'cv_speciation',
            },
        ),
        migrations.CreateModel(
            name='SpecimenTaxonomicClassifier',
            fields=[
                ('bridge_id', models.AutoField(db_column='bridgeid', primary_key=True, serialize=False)),
                ('citation', models.ForeignKey(blank=True, db_column='citationid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='specimen_taxonomic_classifiers', to='dataloader.Citation')),
            ],
            options={
                'db_table': 'specimentaxonomicclassifiers',
            },
        ),
        migrations.CreateModel(
            name='SpecimenType',
            fields=[
                ('term', models.CharField(db_column='term', max_length=255)),
                ('name', models.CharField(db_column='name', max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, db_column='definition', max_length=500)),
                ('category', models.CharField(blank=True, db_column='category', max_length=255)),
                ('source_vocabulary_uri', models.CharField(blank=True, db_column='sourcevocabularyuri', max_length=255)),
            ],
            options={
                'db_table': 'cv_specimentype',
            },
        ),
        migrations.CreateModel(
            name='SpectraResultValue',
            fields=[
                ('value_id', models.BigAutoField(db_column='valueid', primary_key=True, serialize=False)),
                ('value_datetime', models.DateTimeField(db_column='valuedatetime')),
                ('value_datetime_utc_offset', models.IntegerField(db_column='valuedatetimeutcoffset')),
                ('time_aggregation_interval', models.FloatField(db_column='timeaggregationinterval')),
                ('data_value', models.FloatField(db_column='datavalue')),
                ('excitation_wavelength', models.FloatField(db_column='excitationwavelength')),
                ('emission_wavelength', models.FloatField(db_column='emissionwavelength')),
            ],
            options={
                'db_table': 'spectraresultvalues',
            },
        ),
        migrations.CreateModel(
            name='SpectraResultValueAnnotation',
            fields=[
                ('bridge_id', models.AutoField(db_column='bridgeid', primary_key=True, serialize=False)),
                ('annotation', models.ForeignKey(db_column='annotationid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.Annotation')),
                ('value', models.ForeignKey(db_column='valueid', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.SpectraResultValue')),
            ],
            options={
                'db_table': 'spectraresultvalueannotations',
            },
        ),
        migrations.CreateModel(
            name='Status',
            fields=[
                ('term', models.CharField(db_column='term', max_length=255)),
                ('name', models.CharField(db_column='name', max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, db_column='definition', max_length=500)),
                ('category', models.CharField(blank=True, db_column='category', max_length=255)),
                ('source_vocabulary_uri', models.CharField(blank=True, db_column='sourcevocabularyuri', max_length=255)),
            ],
            options={
                'db_table': 'cv_status',
            },
        ),
        migrations.CreateModel(
            name='TaxonomicClassifier',
            fields=[
                ('taxonomic_classifier_id', models.AutoField(db_column='taxonomicclassifierid', primary_key=True, serialize=False)),
                ('taxonomic_classifier_name', models.CharField(db_column='taxonomicclassifiername', max_length=255)),
                ('taxonomic_classifier_common_name', models.CharField(blank=True, db_column='taxonomicclassifiercommonname', max_length=255)),
                ('taxonomic_classifier_description', models.CharField(blank=True, db_column='taxonomicclassifierdescription', max_length=500)),
            ],
            options={
                'db_table': 'taxonomicclassifiers',
            },
        ),
        migrations.CreateModel(
            name='TaxonomicClassifierExternalIdentifier',
            fields=[
                ('bridge_id', models.AutoField(db_column='bridgeid', primary_key=True, serialize=False)),
                ('taxonomic_classifier_external_identifier', models.CharField(db_column='taxonomicclassifierexternalidentifier', max_length=255)),
                ('taxonomic_classifier_external_identifier_uri', models.CharField(blank=True, db_column='taxonomicclassifierexternalidentifieruri', max_length=255)),
                ('external_identifier_system', models.ForeignKey(db_column='externalidentifiersystemid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.ExternalIdentifierSystem')),
                ('taxonomic_classifier', models.ForeignKey(db_column='taxonomicclassifierid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.TaxonomicClassifier')),
            ],
            options={
                'db_table': 'taxonomicclassifierexternalidentifiers',
            },
        ),
        migrations.CreateModel(
            name='TaxonomicClassifierType',
            fields=[
                ('term', models.CharField(db_column='term', max_length=255)),
                ('name', models.CharField(db_column='name', max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, db_column='definition', max_length=500)),
                ('category', models.CharField(blank=True, db_column='category', max_length=255)),
                ('source_vocabulary_uri', models.CharField(blank=True, db_column='sourcevocabularyuri', max_length=255)),
            ],
            options={
                'db_table': 'cv_taxonomicclassifiertype',
            },
        ),
        migrations.CreateModel(
            name='TimeSeriesResultValue',
            fields=[
                ('value_id', models.BigAutoField(db_column='valueid', primary_key=True, serialize=False)),
                ('value_datetime', models.DateTimeField(db_column='valuedatetime')),
                ('value_datetime_utc_offset', models.IntegerField(db_column='valuedatetimeutcoffset')),
                ('time_aggregation_interval', models.FloatField(db_column='timeaggregationinterval')),
                ('data_value', models.FloatField(db_column='datavalue')),
            ],
            options={
                'ordering': ('value_datetime',),
                'db_table': 'timeseriesresultvalues',
            },
        ),
        migrations.CreateModel(
            name='TimeSeriesResultValueAnnotation',
            fields=[
                ('bridge_id', models.AutoField(db_column='bridgeid', primary_key=True, serialize=False)),
                ('annotation', models.ForeignKey(db_column='annotationid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.Annotation')),
                ('value', models.ForeignKey(db_column='valueid', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.TimeSeriesResultValue')),
            ],
            options={
                'db_table': 'timeseriesresultvalueannotations',
            },
        ),
        migrations.CreateModel(
            name='TrajectoryResultValue',
            fields=[
                ('value_id', models.BigAutoField(db_column='valueid', primary_key=True, serialize=False)),
                ('value_datetime', models.DateTimeField(db_column='valuedatetime')),
                ('value_datetime_utc_offset', models.IntegerField(db_column='valuedatetimeutcoffset')),
                ('time_aggregation_interval', models.FloatField(db_column='timeaggregationinterval')),
                ('x_location', models.FloatField(db_column='xlocation')),
                ('y_location', models.FloatField(db_column='ylocation')),
                ('z_location', models.FloatField(db_column='zlocation')),
                ('data_value', models.FloatField(db_column='datavalue')),
                ('trajectory_distance', models.FloatField(db_column='trajectorydistance')),
                ('trajectory_distance_aggregation_interval', models.FloatField(db_column='trajectorydistanceaggregationinterval')),
            ],
            options={
                'db_table': 'trajectoryresultvalues',
            },
        ),
        migrations.CreateModel(
            name='TrajectoryResultValueAnnotation',
            fields=[
                ('bridge_id', models.AutoField(db_column='bridgeid', primary_key=True, serialize=False)),
                ('annotation', models.ForeignKey(db_column='annotationid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.Annotation')),
                ('value', models.ForeignKey(db_column='valueid', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.TrajectoryResultValue')),
            ],
            options={
                'db_table': 'trajectoryresultvalueannotations',
            },
        ),
        migrations.CreateModel(
            name='TransectResultValue',
            fields=[
                ('value_id', models.BigAutoField(db_column='valueid', primary_key=True, serialize=False)),
                ('value_datetime', models.DateTimeField(db_column='valuedatetime')),
                ('value_datetime_utc_offset', models.IntegerField(db_column='valuedatetimeutcoffset')),
                ('time_aggregation_interval', models.FloatField(db_column='timeaggregationinterval')),
                ('x_location', models.FloatField(db_column='xlocation')),
                ('y_location', models.FloatField(db_column='ylocation')),
                ('data_value', models.FloatField(db_column='datavalue')),
                ('transect_distance', models.FloatField(db_column='transectdistance')),
                ('transect_distance_aggregation_interval', models.FloatField(db_column='transectdistanceaggregationinterval')),
                ('aggregation_statistic', models.ForeignKey(db_column='aggregationstatisticcv', on_delete=django.db.models.deletion.CASCADE, to='dataloader.AggregationStatistic')),
            ],
            options={
                'db_table': 'transectresultvalues',
            },
        ),
        migrations.CreateModel(
            name='TransectResultValueAnnotation',
            fields=[
                ('bridge_id', models.AutoField(db_column='bridgeid', primary_key=True, serialize=False)),
                ('annotation', models.ForeignKey(db_column='annotationid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.Annotation')),
                ('value', models.ForeignKey(db_column='valueid', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.TransectResultValue')),
            ],
            options={
                'db_table': 'transectresultvalueannotations',
            },
        ),
        migrations.CreateModel(
            name='Unit',
            fields=[
                ('unit_id', models.AutoField(db_column='unitsid', primary_key=True, serialize=False)),
                ('unit_abbreviation', models.CharField(db_column='unitsabbreviation', max_length=255)),
                ('unit_name', models.CharField(db_column='unitsname', max_length=255)),
                ('unit_link', models.CharField(blank=True, db_column='unitslink', max_length=255)),
            ],
            options={
                'db_table': 'units',
            },
        ),
        migrations.CreateModel(
            name='UnitsType',
            fields=[
                ('term', models.CharField(db_column='term', max_length=255)),
                ('name', models.CharField(db_column='name', max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, db_column='definition', max_length=500)),
                ('category', models.CharField(blank=True, db_column='category', max_length=255)),
                ('source_vocabulary_uri', models.CharField(blank=True, db_column='sourcevocabularyuri', max_length=255)),
            ],
            options={
                'db_table': 'cv_unitstype',
            },
        ),
        migrations.CreateModel(
            name='Variable',
            fields=[
                ('variable_id', models.AutoField(db_column='variableid', primary_key=True, serialize=False)),
                ('variable_code', models.CharField(db_column='variablecode', max_length=50)),
                ('variable_definition', models.CharField(blank=True, db_column='variabledefinition', max_length=500)),
                ('no_data_value', models.FloatField(db_column='nodatavalue')),
            ],
            options={
                'db_table': 'variables',
            },
        ),
        migrations.CreateModel(
            name='VariableExtensionPropertyValue',
            fields=[
                ('bridge_id', models.AutoField(db_column='bridgeid', primary_key=True, serialize=False)),
                ('property_value', models.CharField(db_column='propertyvalue', max_length=255)),
                ('property', models.ForeignKey(db_column='propertyid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.ExtensionProperty')),
                ('variable', models.ForeignKey(db_column='variableid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.Variable')),
            ],
            options={
                'db_table': 'variableextensionpropertyvalues',
            },
        ),
        migrations.CreateModel(
            name='VariableExternalIdentifier',
            fields=[
                ('bridge_id', models.AutoField(db_column='bridgeid', primary_key=True, serialize=False)),
                ('variable_external_identifier', models.CharField(db_column='variableexternalidentifier', max_length=255)),
                ('variable_external_identifier_uri', models.CharField(blank=True, db_column='variableexternalidentifieruri', max_length=255)),
                ('external_identifier_system', models.ForeignKey(db_column='externalidentifiersystemid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.ExternalIdentifierSystem')),
                ('variable', models.ForeignKey(db_column='variableid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.Variable')),
            ],
            options={
                'db_table': 'variableexternalidentifiers',
            },
        ),
        migrations.CreateModel(
            name='VariableName',
            fields=[
                ('term', models.CharField(db_column='term', max_length=255)),
                ('name', models.CharField(db_column='name', max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, db_column='definition', max_length=500)),
                ('category', models.CharField(blank=True, db_column='category', max_length=255)),
                ('source_vocabulary_uri', models.CharField(blank=True, db_column='sourcevocabularyuri', max_length=255)),
            ],
            options={
                'db_table': 'cv_variablename',
            },
        ),
        migrations.CreateModel(
            name='VariableType',
            fields=[
                ('term', models.CharField(db_column='term', max_length=255)),
                ('name', models.CharField(db_column='name', max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, db_column='definition', max_length=500)),
                ('category', models.CharField(blank=True, db_column='category', max_length=255)),
                ('source_vocabulary_uri', models.CharField(blank=True, db_column='sourcevocabularyuri', max_length=255)),
            ],
            options={
                'db_table': 'cv_variabletype',
            },
        ),
        migrations.CreateModel(
            name='Specimen',
            fields=[
                ('sampling_feature', models.OneToOneField(db_column='samplingfeatureid', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='dataloader.SamplingFeature')),
                ('is_field_specimen', models.BooleanField(db_column='isfieldspecimen', default=None)),
            ],
            options={
                'db_table': 'specimens',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CalibrationAction',
            fields=[
                ('action', models.OneToOneField(db_column='actionid', on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='calibration', serialize=False, to='dataloader.Action')),
                ('calibration_check_value', models.FloatField(blank=True, db_column='calibrationcheckvalue', null=True)),
                ('calibration_equation', models.CharField(blank=True, db_column='calibrationequation', max_length=255)),
            ],
            options={
                'db_table': 'calibrationactions',
            },
        ),
        migrations.CreateModel(
            name='CategoricalResult',
            fields=[
                ('result', models.OneToOneField(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='dataloader.Result')),
                ('x_location', models.FloatField(db_column='xlocation')),
                ('y_location', models.FloatField(db_column='ylocation')),
                ('z_location', models.FloatField(db_column='zlocation')),
                ('quality_code', models.ForeignKey(db_column='qualitycodecv', on_delete=django.db.models.deletion.CASCADE, to='dataloader.QualityCode')),
            ],
            options={
                'db_table': 'categoricalresults',
            },
        ),
        migrations.CreateModel(
            name='MaintenanceAction',
            fields=[
                ('action', models.OneToOneField(db_column='actionid', on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='maintenance', serialize=False, to='dataloader.Action')),
                ('is_factory_service', models.BooleanField(db_column='isfactoryservice', default=None)),
                ('maintenance_code', models.CharField(blank=True, db_column='maintenancecode', max_length=50)),
                ('maintenance_reason', models.CharField(blank=True, db_column='maintenancereason', max_length=500)),
            ],
            options={
                'db_table': 'maintenanceactions',
            },
        ),
        migrations.CreateModel(
            name='MeasurementResult',
            fields=[
                ('result', models.OneToOneField(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='dataloader.Result')),
                ('time_aggregation_interval', models.FloatField(db_column='timeaggregationinterval')),
                ('x_location', models.FloatField(db_column='xlocation')),
                ('y_location', models.FloatField(db_column='ylocation')),
                ('z_location', models.FloatField(db_column='zlocation')),
                ('aggregation_statistic', models.ForeignKey(db_column='aggregationstatisticcv', on_delete=django.db.models.deletion.CASCADE, to='dataloader.AggregationStatistic')),
                ('censor_code', models.ForeignKey(db_column='censorcodecv', on_delete=django.db.models.deletion.CASCADE, to='dataloader.CensorCode')),
                ('quality_code', models.ForeignKey(db_column='qualitycodecv', on_delete=django.db.models.deletion.CASCADE, to='dataloader.QualityCode')),
            ],
            options={
                'db_table': 'measurementresults',
            },
        ),
        migrations.CreateModel(
            name='PointCoverageResult',
            fields=[
                ('result', models.OneToOneField(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='dataloader.Result')),
                ('time_aggregation_interval', models.FloatField(db_column='timeaggregationinterval')),
                ('z_location', models.FloatField(db_column='zlocation')),
                ('intended_x_spacing', models.FloatField(db_column='intendedxspacing')),
                ('intended_y_spacing', models.FloatField(db_column='intendedyspacing')),
                ('aggregation_statistic', models.ForeignKey(db_column='aggregationstatisticcv', on_delete=django.db.models.deletion.CASCADE, to='dataloader.AggregationStatistic')),
            ],
            options={
                'db_table': 'pointcoverageresults',
            },
        ),
        migrations.CreateModel(
            name='ProfileResult',
            fields=[
                ('result', models.OneToOneField(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='dataloader.Result')),
                ('x_location', models.FloatField(db_column='xlocation')),
                ('y_location', models.FloatField(db_column='ylocation')),
                ('intended_z_spacing', models.FloatField(db_column='intendedzspacing')),
                ('intended_time_spacing', models.FloatField(db_column='intendedtimespacing')),
                ('aggregation_statistic', models.ForeignKey(db_column='aggregationstatisticcv', on_delete=django.db.models.deletion.CASCADE, to='dataloader.AggregationStatistic')),
            ],
            options={
                'db_table': 'profileresults',
            },
        ),
        migrations.CreateModel(
            name='ResultDerivationEquation',
            fields=[
                ('result', models.OneToOneField(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='dataloader.Result')),
                ('derivation_equation', models.ForeignKey(db_column='derivationequationid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.DerivationEquation')),
            ],
            options={
                'db_table': 'resultderivationequations',
            },
        ),
        migrations.CreateModel(
            name='ResultNormalizationValue',
            fields=[
                ('result', models.OneToOneField(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='dataloader.Result')),
            ],
            options={
                'db_table': 'resultnormalizationvalues',
            },
        ),
        migrations.CreateModel(
            name='SectionResult',
            fields=[
                ('result', models.OneToOneField(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='dataloader.Result')),
                ('y_location', models.FloatField(db_column='ylocation')),
                ('intended_x_spacing', models.FloatField(db_column='intendedxspacing')),
                ('intended_z_spacing', models.FloatField(db_column='intendedzspacing')),
                ('intended_time_spacing', models.FloatField(db_column='intendedtimespacing')),
                ('aggregation_statistic', models.ForeignKey(db_column='aggregationstatisticcv', on_delete=django.db.models.deletion.CASCADE, to='dataloader.AggregationStatistic')),
            ],
            options={
                'db_table': 'sectionresults',
            },
        ),
        migrations.CreateModel(
            name='Site',
            fields=[
                ('sampling_feature', models.OneToOneField(db_column='samplingfeatureid', on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='site', serialize=False, to='dataloader.SamplingFeature')),
                ('latitude', models.FloatField(db_column='latitude')),
                ('longitude', models.FloatField(db_column='longitude')),
                ('site_type', models.ForeignKey(db_column='sitetypecv', on_delete=django.db.models.deletion.CASCADE, to='dataloader.SiteType')),
            ],
            options={
                'db_table': 'sites',
            },
        ),
        migrations.CreateModel(
            name='SpecimenBatchPosition',
            fields=[
                ('feature_action', models.OneToOneField(db_column='featureactionid', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='dataloader.FeatureAction')),
                ('batch_position_number', models.IntegerField(db_column='batchpositionnumber')),
                ('batch_position_label', models.CharField(blank=True, db_column='batchpositionlabel', max_length=255)),
            ],
            options={
                'db_table': 'specimenbatchpostions',
            },
        ),
        migrations.CreateModel(
            name='SpectraResult',
            fields=[
                ('result', models.OneToOneField(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='dataloader.Result')),
                ('x_location', models.FloatField(db_column='xlocation')),
                ('y_location', models.FloatField(db_column='ylocation')),
                ('z_location', models.FloatField(db_column='zlocation')),
                ('intended_wavelength_spacing', models.FloatField(db_column='intendedwavelengthspacing')),
                ('aggregation_statistic', models.ForeignKey(db_column='aggregationstatisticcv', on_delete=django.db.models.deletion.CASCADE, to='dataloader.AggregationStatistic')),
            ],
            options={
                'db_table': 'spectraresults',
            },
        ),
        migrations.CreateModel(
            name='TimeSeriesResult',
            fields=[
                ('result', models.OneToOneField(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='dataloader.Result')),
                ('x_location', models.FloatField(db_column='xlocation')),
                ('y_location', models.FloatField(db_column='ylocation')),
                ('z_location', models.FloatField(db_column='zlocation')),
                ('intended_time_spacing', models.FloatField(db_column='intendedtimespacing')),
                ('aggregation_statistic', models.ForeignKey(db_column='aggregationstatisticcv', on_delete=django.db.models.deletion.CASCADE, to='dataloader.AggregationStatistic')),
            ],
            options={
                'db_table': 'timeseriesresults',
            },
        ),
        migrations.CreateModel(
            name='TrajectoryResult',
            fields=[
                ('result', models.OneToOneField(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='dataloader.Result')),
                ('intended_time_spacing', models.FloatField(db_column='intendedtimespacing')),
                ('intended_trajectory_spacing', models.FloatField(db_column='intendedtrajectoryspacing')),
                ('aggregation_statistic', models.ForeignKey(db_column='aggregationstatisticcv', on_delete=django.db.models.deletion.CASCADE, to='dataloader.AggregationStatistic')),
            ],
            options={
                'db_table': 'trajectoryresults',
            },
        ),
        migrations.CreateModel(
            name='TransectResult',
            fields=[
                ('result', models.OneToOneField(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='dataloader.Result')),
                ('z_location', models.FloatField(db_column='zlocation')),
                ('intended_time_spacing', models.FloatField(db_column='intendedtimespacing')),
                ('intended_transect_spacing', models.FloatField(db_column='intendedtransectspacing')),
                ('aggregation_statistic', models.ForeignKey(db_column='aggregationstatisticcv', on_delete=django.db.models.deletion.CASCADE, to='dataloader.AggregationStatistic')),
            ],
            options={
                'db_table': 'transectresults',
            },
        ),
        migrations.AddField(
            model_name='variable',
            name='extension_property_values',
            field=models.ManyToManyField(related_name='variables', through='dataloader.VariableExtensionPropertyValue', to='dataloader.ExtensionProperty'),
        ),
        migrations.AddField(
            model_name='variable',
            name='external_identifiers',
            field=models.ManyToManyField(related_name='variables', through='dataloader.VariableExternalIdentifier', to='dataloader.ExternalIdentifierSystem'),
        ),
        migrations.AddField(
            model_name='variable',
            name='speciation',
            field=models.ForeignKey(db_column='speciationcv', on_delete=django.db.models.deletion.CASCADE, to='dataloader.Speciation'),
        ),
        migrations.AddField(
            model_name='variable',
            name='variable_name',
            field=models.ForeignKey(db_column='variablenamecv', on_delete=django.db.models.deletion.CASCADE, to='dataloader.VariableName'),
        ),
        migrations.AddField(
            model_name='variable',
            name='variable_type',
            field=models.ForeignKey(db_column='variabletypecv', on_delete=django.db.models.deletion.CASCADE, to='dataloader.VariableType'),
        ),
        migrations.AddField(
            model_name='unit',
            name='unit_type',
            field=models.ForeignKey(db_column='unitstypecv', on_delete=django.db.models.deletion.CASCADE, to='dataloader.UnitsType'),
        ),
        migrations.AddField(
            model_name='transectresultvalue',
            name='annotations',
            field=models.ManyToManyField(related_name='annotated_transect_values', through='dataloader.TransectResultValueAnnotation', to='dataloader.Annotation'),
        ),
        migrations.AddField(
            model_name='transectresultvalue',
            name='censor_code',
            field=models.ForeignKey(db_column='censorcodecv', on_delete=django.db.models.deletion.CASCADE, to='dataloader.CensorCode'),
        ),
        migrations.AddField(
            model_name='transectresultvalue',
            name='quality_code',
            field=models.ForeignKey(db_column='qualitycodecv', on_delete=django.db.models.deletion.CASCADE, to='dataloader.QualityCode'),
        ),
        migrations.AddField(
            model_name='transectresultvalue',
            name='time_aggregation_interval_unit',
            field=models.ForeignKey(blank=True, db_column='timeaggregationintervalunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='transectresultvalue',
            name='transect_distance_unit',
            field=models.ForeignKey(db_column='transectdistanceunitsid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='transectresultvalue',
            name='x_location_unit',
            field=models.ForeignKey(blank=True, db_column='xlocationunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='transectresultvalue',
            name='y_location_unit',
            field=models.ForeignKey(blank=True, db_column='ylocationunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='trajectoryresultvalue',
            name='annotations',
            field=models.ManyToManyField(related_name='annotated_Trajectory_values', through='dataloader.TrajectoryResultValueAnnotation', to='dataloader.Annotation'),
        ),
        migrations.AddField(
            model_name='trajectoryresultvalue',
            name='censor_code',
            field=models.ForeignKey(db_column='censorcodecv', on_delete=django.db.models.deletion.CASCADE, to='dataloader.CensorCode'),
        ),
        migrations.AddField(
            model_name='trajectoryresultvalue',
            name='quality_code',
            field=models.ForeignKey(db_column='qualitycodecv', on_delete=django.db.models.deletion.CASCADE, to='dataloader.QualityCode'),
        ),
        migrations.AddField(
            model_name='trajectoryresultvalue',
            name='time_aggregation_interval_unit',
            field=models.ForeignKey(blank=True, db_column='timeaggregationintervalunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='trajectoryresultvalue',
            name='trajectory_distance_unit',
            field=models.ForeignKey(db_column='trajectorydistanceunitsid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='trajectoryresultvalue',
            name='x_location_unit',
            field=models.ForeignKey(blank=True, db_column='xlocationunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='trajectoryresultvalue',
            name='y_location_unit',
            field=models.ForeignKey(blank=True, db_column='ylocationunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='trajectoryresultvalue',
            name='z_location_unit',
            field=models.ForeignKey(blank=True, db_column='zlocationunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='timeseriesresultvalue',
            name='annotations',
            field=models.ManyToManyField(related_name='annotated_time_series_values', through='dataloader.TimeSeriesResultValueAnnotation', to='dataloader.Annotation'),
        ),
        migrations.AddField(
            model_name='timeseriesresultvalue',
            name='censor_code',
            field=models.ForeignKey(db_column='censorcodecv', on_delete=django.db.models.deletion.CASCADE, to='dataloader.CensorCode'),
        ),
        migrations.AddField(
            model_name='timeseriesresultvalue',
            name='quality_code',
            field=models.ForeignKey(db_column='qualitycodecv', on_delete=django.db.models.deletion.CASCADE, to='dataloader.QualityCode'),
        ),
        migrations.AddField(
            model_name='timeseriesresultvalue',
            name='time_aggregation_interval_unit',
            field=models.ForeignKey(blank=True, db_column='timeaggregationintervalunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='taxonomicclassifier',
            name='external_identifiers',
            field=models.ManyToManyField(related_name='taxonomic_classifier', through='dataloader.TaxonomicClassifierExternalIdentifier', to='dataloader.ExternalIdentifierSystem'),
        ),
        migrations.AddField(
            model_name='taxonomicclassifier',
            name='parent_taxonomic_classifier',
            field=models.ForeignKey(blank=True, db_column='parenttaxonomicclassifierid', null=True, on_delete=django.db.models.deletion.CASCADE, to='dataloader.TaxonomicClassifier'),
        ),
        migrations.AddField(
            model_name='taxonomicclassifier',
            name='taxonomic_classifier_type',
            field=models.ForeignKey(db_column='taxonomicclassifiertypecv', on_delete=django.db.models.deletion.CASCADE, to='dataloader.TaxonomicClassifierType'),
        ),
        migrations.AddField(
            model_name='spectraresultvalue',
            name='annotations',
            field=models.ManyToManyField(related_name='annotated_spectra_values', through='dataloader.SpectraResultValueAnnotation', to='dataloader.Annotation'),
        ),
        migrations.AddField(
            model_name='spectraresultvalue',
            name='censor_code',
            field=models.ForeignKey(db_column='censorcodecv', on_delete=django.db.models.deletion.CASCADE, to='dataloader.CensorCode'),
        ),
        migrations.AddField(
            model_name='spectraresultvalue',
            name='quality_code',
            field=models.ForeignKey(db_column='qualitycodecv', on_delete=django.db.models.deletion.CASCADE, to='dataloader.QualityCode'),
        ),
        migrations.AddField(
            model_name='spectraresultvalue',
            name='time_aggregation_interval_unit',
            field=models.ForeignKey(blank=True, db_column='timeaggregationintervalunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='spectraresultvalue',
            name='wavelength_unit',
            field=models.ForeignKey(db_column='wavelengthunitsid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='specimentaxonomicclassifier',
            name='taxonomic_classifier',
            field=models.ForeignKey(db_column='taxonomicclassifierid', on_delete=django.db.models.deletion.CASCADE, related_name='specimens', to='dataloader.TaxonomicClassifier'),
        ),
        migrations.AddField(
            model_name='spatialreference',
            name='external_identifiers',
            field=models.ManyToManyField(related_name='spatial_references', through='dataloader.SpatialReferenceExternalIdentifier', to='dataloader.ExternalIdentifierSystem'),
        ),
        migrations.AddField(
            model_name='spatialoffset',
            name='offset_1_unit',
            field=models.ForeignKey(db_column='offset1unitid', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='spatialoffset',
            name='offset_2_unit',
            field=models.ForeignKey(blank=True, db_column='offset2unitid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='spatialoffset',
            name='offset_3_unit',
            field=models.ForeignKey(blank=True, db_column='offset3unitid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='spatialoffset',
            name='spatial_offset_type',
            field=models.ForeignKey(db_column='spatialoffsettypecv', on_delete=django.db.models.deletion.CASCADE, to='dataloader.SpatialOffsetType'),
        ),
        migrations.AddField(
            model_name='simulation',
            name='action',
            field=models.ForeignKey(db_column='actionid', on_delete=django.db.models.deletion.CASCADE, related_name='simulations', to='dataloader.Action'),
        ),
        migrations.AddField(
            model_name='simulation',
            name='input_data_set',
            field=models.ForeignKey(blank=True, db_column='inputdatasetid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='simulations', to='dataloader.DataSet'),
        ),
        migrations.AddField(
            model_name='simulation',
            name='model',
            field=models.ForeignKey(db_column='modelid', on_delete=django.db.models.deletion.CASCADE, related_name='simulations', to='dataloader.Model'),
        ),
        migrations.AddField(
            model_name='simulation',
            name='time_step_unit',
            field=models.ForeignKey(db_column='timestepunitsid', on_delete=django.db.models.deletion.CASCADE, related_name='simulations', to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='sectionresultvalue',
            name='annotations',
            field=models.ManyToManyField(related_name='annotated_section_values', through='dataloader.SectionResultValueAnnotation', to='dataloader.Annotation'),
        ),
        migrations.AddField(
            model_name='sectionresultvalue',
            name='censor_code',
            field=models.ForeignKey(db_column='censorcodecv', on_delete=django.db.models.deletion.CASCADE, to='dataloader.CensorCode'),
        ),
        migrations.AddField(
            model_name='sectionresultvalue',
            name='quality_code',
            field=models.ForeignKey(db_column='qualitycodecv', on_delete=django.db.models.deletion.CASCADE, to='dataloader.QualityCode'),
        ),
        migrations.AddField(
            model_name='sectionresultvalue',
            name='time_aggregation_interval_unit',
            field=models.ForeignKey(blank=True, db_column='timeaggregationintervalunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='sectionresultvalue',
            name='x_location_unit',
            field=models.ForeignKey(blank=True, db_column='xlocationunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='sectionresultvalue',
            name='z_location_unit',
            field=models.ForeignKey(blank=True, db_column='zlocationunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='samplingfeatureexternalidentifier',
            name='sampling_feature',
            field=models.ForeignKey(db_column='samplingfeatureid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.SamplingFeature'),
        ),
        migrations.AddField(
            model_name='samplingfeatureextensionpropertyvalue',
            name='sampling_feature',
            field=models.ForeignKey(db_column='samplingfeatureid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.SamplingFeature'),
        ),
        migrations.AddField(
            model_name='samplingfeatureannotation',
            name='sampling_feature',
            field=models.ForeignKey(db_column='samplingfeatureid', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.SamplingFeature'),
        ),
        migrations.AddField(
            model_name='samplingfeature',
            name='actions',
            field=models.ManyToManyField(related_name='sampling_features', through='dataloader.FeatureAction', to='dataloader.Action'),
        ),
        migrations.AddField(
            model_name='samplingfeature',
            name='annotations',
            field=models.ManyToManyField(related_name='annotated_sampling_features', through='dataloader.SamplingFeatureAnnotation', to='dataloader.Annotation'),
        ),
        migrations.AddField(
            model_name='samplingfeature',
            name='elevation_datum',
            field=models.ForeignKey(blank=True, db_column='elevationdatumcv', null=True, on_delete=django.db.models.deletion.CASCADE, to='dataloader.ElevationDatum'),
        ),
        migrations.AddField(
            model_name='samplingfeature',
            name='extension_property_values',
            field=models.ManyToManyField(related_name='sampling_features', through='dataloader.SamplingFeatureExtensionPropertyValue', to='dataloader.ExtensionProperty'),
        ),
        migrations.AddField(
            model_name='samplingfeature',
            name='external_identifiers',
            field=models.ManyToManyField(related_name='sampling_features', through='dataloader.SamplingFeatureExternalIdentifier', to='dataloader.ExternalIdentifierSystem'),
        ),
        migrations.AddField(
            model_name='samplingfeature',
            name='sampling_feature_geo_type',
            field=models.ForeignKey(blank=True, db_column='samplingfeaturegeotypecv', null=True, on_delete=django.db.models.deletion.CASCADE, to='dataloader.SamplingFeatureGeoType'),
        ),
        migrations.AddField(
            model_name='samplingfeature',
            name='sampling_feature_type',
            field=models.ForeignKey(db_column='samplingfeaturetypecv', on_delete=django.db.models.deletion.CASCADE, to='dataloader.SamplingFeatureType'),
        ),
        migrations.AddField(
            model_name='resultextensionpropertyvalue',
            name='result',
            field=models.ForeignKey(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.Result'),
        ),
        migrations.AddField(
            model_name='resultdataquality',
            name='result',
            field=models.ForeignKey(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.Result'),
        ),
        migrations.AddField(
            model_name='resultannotation',
            name='result',
            field=models.ForeignKey(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, related_name='dated_annotations', to='dataloader.Result'),
        ),
        migrations.AddField(
            model_name='result',
            name='annotations',
            field=models.ManyToManyField(related_name='annotated_results', through='dataloader.ResultAnnotation', to='dataloader.Annotation'),
        ),
        migrations.AddField(
            model_name='result',
            name='data_quality_values',
            field=models.ManyToManyField(related_name='results', through='dataloader.ResultDataQuality', to='dataloader.DataQuality'),
        ),
        migrations.AddField(
            model_name='result',
            name='data_sets',
            field=models.ManyToManyField(related_name='results', through='dataloader.DataSetResult', to='dataloader.DataSet'),
        ),
        migrations.AddField(
            model_name='result',
            name='extension_property_values',
            field=models.ManyToManyField(related_name='results', through='dataloader.ResultExtensionPropertyValue', to='dataloader.ExtensionProperty'),
        ),
        migrations.AddField(
            model_name='result',
            name='feature_action',
            field=models.ForeignKey(db_column='featureactionid', on_delete=django.db.models.deletion.CASCADE, related_name='results', to='dataloader.FeatureAction'),
        ),
        migrations.AddField(
            model_name='result',
            name='processing_level',
            field=models.ForeignKey(db_column='processinglevelid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.ProcessingLevel'),
        ),
        migrations.AddField(
            model_name='result',
            name='result_type',
            field=models.ForeignKey(db_column='resulttypecv', on_delete=django.db.models.deletion.CASCADE, to='dataloader.ResultType'),
        ),
        migrations.AddField(
            model_name='result',
            name='sampled_medium',
            field=models.ForeignKey(db_column='sampledmediumcv', on_delete=django.db.models.deletion.CASCADE, to='dataloader.Medium'),
        ),
        migrations.AddField(
            model_name='result',
            name='status',
            field=models.ForeignKey(blank=True, db_column='statuscv', on_delete=django.db.models.deletion.CASCADE, to='dataloader.Status'),
        ),
        migrations.AddField(
            model_name='result',
            name='taxonomic_classifier',
            field=models.ForeignKey(blank=True, db_column='taxonomicclassifierid', null=True, on_delete=django.db.models.deletion.CASCADE, to='dataloader.TaxonomicClassifier'),
        ),
        migrations.AddField(
            model_name='result',
            name='unit',
            field=models.ForeignKey(db_column='unitsid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='result',
            name='variable',
            field=models.ForeignKey(db_column='variableid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.Variable'),
        ),
        migrations.AddField(
            model_name='relatedresult',
            name='related_result',
            field=models.ForeignKey(db_column='relatedresultid', on_delete=django.db.models.deletion.CASCADE, related_name='related_result__related_result', to='dataloader.Result'),
        ),
        migrations.AddField(
            model_name='relatedresult',
            name='relationship_type',
            field=models.ForeignKey(db_column='relationshiptypecv', on_delete=django.db.models.deletion.CASCADE, to='dataloader.RelationshipType'),
        ),
        migrations.AddField(
            model_name='relatedresult',
            name='result',
            field=models.ForeignKey(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.Result'),
        ),
        migrations.AddField(
            model_name='relatedmodel',
            name='relationship_type',
            field=models.ForeignKey(db_column='relationshiptypecv', on_delete=django.db.models.deletion.CASCADE, to='dataloader.RelationshipType'),
        ),
        migrations.AddField(
            model_name='relatedfeature',
            name='related_feature',
            field=models.ForeignKey(db_column='relatedfeatureid', on_delete=django.db.models.deletion.CASCADE, related_name='related_features__related_feature', to='dataloader.SamplingFeature'),
        ),
        migrations.AddField(
            model_name='relatedfeature',
            name='relationship_type',
            field=models.ForeignKey(db_column='relationshiptypecv', on_delete=django.db.models.deletion.CASCADE, to='dataloader.RelationshipType'),
        ),
        migrations.AddField(
            model_name='relatedfeature',
            name='sampling_feature',
            field=models.ForeignKey(db_column='samplingfeatureid', on_delete=django.db.models.deletion.CASCADE, related_name='related_features__sampling_feature', to='dataloader.SamplingFeature'),
        ),
        migrations.AddField(
            model_name='relatedfeature',
            name='spatial_offset',
            field=models.ForeignKey(blank=True, db_column='spatialoffsetid', null=True, on_delete=django.db.models.deletion.CASCADE, to='dataloader.SpatialOffset'),
        ),
        migrations.AddField(
            model_name='relatedequipment',
            name='relationship_type',
            field=models.ForeignKey(db_column='relationshiptypecv', on_delete=django.db.models.deletion.CASCADE, to='dataloader.RelationshipType'),
        ),
        migrations.AddField(
            model_name='relateddataset',
            name='relationship_type',
            field=models.ForeignKey(db_column='relationshiptypecv', on_delete=django.db.models.deletion.CASCADE, to='dataloader.RelationshipType'),
        ),
        migrations.AddField(
            model_name='relatedannotation',
            name='relationship_type',
            field=models.ForeignKey(db_column='relationshiptypecv', on_delete=django.db.models.deletion.CASCADE, to='dataloader.RelationshipType'),
        ),
        migrations.AddField(
            model_name='relatedaction',
            name='action',
            field=models.ForeignKey(db_column='actionid', on_delete=django.db.models.deletion.CASCADE, related_name='related_actions', to='dataloader.Action'),
        ),
        migrations.AddField(
            model_name='relatedaction',
            name='related_action',
            field=models.ForeignKey(db_column='relatedactionid', on_delete=django.db.models.deletion.CASCADE, related_name='reverse_related_actions', to='dataloader.Action'),
        ),
        migrations.AddField(
            model_name='relatedaction',
            name='relationship_type',
            field=models.ForeignKey(db_column='relationshiptypecv', on_delete=django.db.models.deletion.CASCADE, to='dataloader.RelationshipType'),
        ),
        migrations.AddField(
            model_name='referencematerialvalue',
            name='unit',
            field=models.ForeignKey(db_column='unitsid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='referencematerialvalue',
            name='variable',
            field=models.ForeignKey(db_column='variableid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.Variable'),
        ),
        migrations.AddField(
            model_name='referencematerial',
            name='external_identifiers',
            field=models.ManyToManyField(related_name='reference_materials', through='dataloader.ReferenceMaterialExternalIdentifier', to='dataloader.ExternalIdentifierSystem'),
        ),
        migrations.AddField(
            model_name='referencematerial',
            name='reference_material_medium',
            field=models.ForeignKey(db_column='referencematerialmediumcv', on_delete=django.db.models.deletion.CASCADE, to='dataloader.Medium'),
        ),
        migrations.AddField(
            model_name='referencematerial',
            name='reference_material_organization',
            field=models.ForeignKey(db_column='referencematerialorganizationid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.Organization'),
        ),
        migrations.AddField(
            model_name='referencematerial',
            name='sampling_feature',
            field=models.ForeignKey(blank=True, db_column='samplingfeatureid', null=True, on_delete=django.db.models.deletion.CASCADE, to='dataloader.SamplingFeature'),
        ),
        migrations.AddField(
            model_name='profileresultvalue',
            name='annotations',
            field=models.ManyToManyField(related_name='annotated_profile_values', through='dataloader.ProfileResultValueAnnotation', to='dataloader.Annotation'),
        ),
        migrations.AddField(
            model_name='profileresultvalue',
            name='censor_code',
            field=models.ForeignKey(db_column='censorcodecv', on_delete=django.db.models.deletion.CASCADE, to='dataloader.CensorCode'),
        ),
        migrations.AddField(
            model_name='profileresultvalue',
            name='quality_code',
            field=models.ForeignKey(db_column='qualitycodecv', on_delete=django.db.models.deletion.CASCADE, to='dataloader.QualityCode'),
        ),
        migrations.AddField(
            model_name='profileresultvalue',
            name='time_aggregation_interval_unit',
            field=models.ForeignKey(blank=True, db_column='timeaggregationintervalunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='profileresultvalue',
            name='z_location_unit',
            field=models.ForeignKey(blank=True, db_column='zlocationunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='pointcoverageresultvalue',
            name='annotations',
            field=models.ManyToManyField(related_name='annotated_point_coverage_values', through='dataloader.PointCoverageResultValueAnnotation', to='dataloader.Annotation'),
        ),
        migrations.AddField(
            model_name='pointcoverageresultvalue',
            name='censor_code',
            field=models.ForeignKey(db_column='censorcodecv', on_delete=django.db.models.deletion.CASCADE, to='dataloader.CensorCode'),
        ),
        migrations.AddField(
            model_name='pointcoverageresultvalue',
            name='quality_code',
            field=models.ForeignKey(db_column='qualitycodecv', on_delete=django.db.models.deletion.CASCADE, to='dataloader.QualityCode'),
        ),
        migrations.AddField(
            model_name='pointcoverageresultvalue',
            name='x_location_unit',
            field=models.ForeignKey(blank=True, db_column='xlocationunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='pointcoverageresultvalue',
            name='y_location_unit',
            field=models.ForeignKey(blank=True, db_column='ylocationunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='people',
            name='external_identifiers',
            field=models.ManyToManyField(related_name='people', through='dataloader.PersonExternalIdentifier', to='dataloader.ExternalIdentifierSystem'),
        ),
        migrations.AddField(
            model_name='organization',
            name='organization_type',
            field=models.ForeignKey(db_column='organizationtypecv', on_delete=django.db.models.deletion.CASCADE, to='dataloader.OrganizationType'),
        ),
        migrations.AddField(
            model_name='organization',
            name='parent_organization',
            field=models.ForeignKey(blank=True, db_column='parentorganizationid', null=True, on_delete=django.db.models.deletion.CASCADE, to='dataloader.Organization'),
        ),
        migrations.AddField(
            model_name='organization',
            name='people',
            field=models.ManyToManyField(through='dataloader.Affiliation', to='dataloader.People'),
        ),
        migrations.AddField(
            model_name='methodcitation',
            name='relationship_type',
            field=models.ForeignKey(db_column='relationshiptypecv', on_delete=django.db.models.deletion.CASCADE, to='dataloader.RelationshipType'),
        ),
        migrations.AddField(
            model_name='method',
            name='annotations',
            field=models.ManyToManyField(related_name='annotated_methods', through='dataloader.MethodAnnotation', to='dataloader.Annotation'),
        ),
        migrations.AddField(
            model_name='method',
            name='extension_property_values',
            field=models.ManyToManyField(related_name='methods', through='dataloader.MethodExtensionPropertyValue', to='dataloader.ExtensionProperty'),
        ),
        migrations.AddField(
            model_name='method',
            name='external_identifiers',
            field=models.ManyToManyField(related_name='methods', through='dataloader.MethodExternalIdentifier', to='dataloader.ExternalIdentifierSystem'),
        ),
        migrations.AddField(
            model_name='method',
            name='method_type',
            field=models.ForeignKey(db_column='methodtypecv', on_delete=django.db.models.deletion.CASCADE, to='dataloader.MethodType'),
        ),
        migrations.AddField(
            model_name='method',
            name='organization',
            field=models.ForeignKey(blank=True, db_column='organizationid', null=True, on_delete=django.db.models.deletion.CASCADE, to='dataloader.Organization'),
        ),
        migrations.AddField(
            model_name='measurementresultvalue',
            name='annotations',
            field=models.ManyToManyField(related_name='annotated_measurement_values', through='dataloader.MeasurementResultValueAnnotation', to='dataloader.Annotation'),
        ),
        migrations.AddField(
            model_name='instrumentoutputvariable',
            name='instrument_method',
            field=models.ForeignKey(db_column='instrumentmethodid', on_delete=django.db.models.deletion.CASCADE, related_name='instrument_output_variables', to='dataloader.Method'),
        ),
        migrations.AddField(
            model_name='instrumentoutputvariable',
            name='instrument_raw_output_unit',
            field=models.ForeignKey(db_column='instrumentrawoutputunitsid', on_delete=django.db.models.deletion.CASCADE, related_name='instrument_output_variables', to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='instrumentoutputvariable',
            name='model',
            field=models.ForeignKey(db_column='modelid', on_delete=django.db.models.deletion.CASCADE, related_name='instrument_output_variables', to='dataloader.EquipmentModel'),
        ),
        migrations.AddField(
            model_name='instrumentoutputvariable',
            name='variable',
            field=models.ForeignKey(db_column='variableid', on_delete=django.db.models.deletion.CASCADE, related_name='instrument_output_variables', to='dataloader.Variable'),
        ),
        migrations.AddField(
            model_name='featureaction',
            name='action',
            field=models.ForeignKey(db_column='actionid', on_delete=django.db.models.deletion.CASCADE, related_name='feature_actions', to='dataloader.Action'),
        ),
        migrations.AddField(
            model_name='featureaction',
            name='sampling_feature',
            field=models.ForeignKey(db_column='samplingfeatureid', on_delete=django.db.models.deletion.CASCADE, related_name='feature_actions', to='dataloader.SamplingFeature'),
        ),
        migrations.AddField(
            model_name='externalidentifiersystem',
            name='identifier_system_organization',
            field=models.ForeignKey(db_column='identifiersystemorganizationid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.Organization'),
        ),
        migrations.AddField(
            model_name='extensionproperty',
            name='property_data_type',
            field=models.ForeignKey(db_column='propertydatatypecv', on_delete=django.db.models.deletion.CASCADE, to='dataloader.PropertyDataType'),
        ),
        migrations.AddField(
            model_name='extensionproperty',
            name='property_units',
            field=models.ForeignKey(blank=True, db_column='propertyunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='equipmentused',
            name='action',
            field=models.ForeignKey(db_column='actionid', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.Action'),
        ),
        migrations.AddField(
            model_name='equipmentused',
            name='equipment',
            field=models.ForeignKey(db_column='equipmentid', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.Equipment'),
        ),
        migrations.AddField(
            model_name='equipmentmodel',
            name='model_manufacturer',
            field=models.ForeignKey(db_column='modelmanufacturerid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.Organization'),
        ),
        migrations.AddField(
            model_name='equipmentmodel',
            name='output_units',
            field=models.ManyToManyField(related_name='instrument_models', through='dataloader.InstrumentOutputVariable', to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='equipmentmodel',
            name='output_variables',
            field=models.ManyToManyField(related_name='instrument_models', through='dataloader.InstrumentOutputVariable', to='dataloader.Variable'),
        ),
        migrations.AddField(
            model_name='equipment',
            name='annotations',
            field=models.ManyToManyField(related_name='annotated_equipment', through='dataloader.EquipmentAnnotation', to='dataloader.Annotation'),
        ),
        migrations.AddField(
            model_name='equipment',
            name='equipment_model',
            field=models.ForeignKey(db_column='equipmentmodelid', on_delete=django.db.models.deletion.CASCADE, related_name='equipment', to='dataloader.EquipmentModel'),
        ),
        migrations.AddField(
            model_name='equipment',
            name='equipment_owner',
            field=models.ForeignKey(db_column='equipmentownerid', on_delete=django.db.models.deletion.CASCADE, related_name='owned_equipment', to='dataloader.People'),
        ),
        migrations.AddField(
            model_name='equipment',
            name='equipment_type',
            field=models.ForeignKey(db_column='equipmenttypecv', on_delete=django.db.models.deletion.CASCADE, to='dataloader.EquipmentType'),
        ),
        migrations.AddField(
            model_name='equipment',
            name='equipment_vendor',
            field=models.ForeignKey(db_column='equipmentvendorid', on_delete=django.db.models.deletion.CASCADE, related_name='equipment', to='dataloader.Organization'),
        ),
        migrations.AddField(
            model_name='directive',
            name='directive_type',
            field=models.ForeignKey(db_column='directivetypecv', on_delete=django.db.models.deletion.CASCADE, to='dataloader.DirectiveType'),
        ),
        migrations.AddField(
            model_name='datasetresult',
            name='result',
            field=models.ForeignKey(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.Result'),
        ),
        migrations.AddField(
            model_name='datasetcitation',
            name='relationship_type',
            field=models.ForeignKey(db_column='relationshiptypecv', on_delete=django.db.models.deletion.CASCADE, to='dataloader.RelationshipType'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='citations',
            field=models.ManyToManyField(related_name='cited_data_sets', through='dataloader.DataSetCitation', to='dataloader.Citation'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='data_set_type',
            field=models.ForeignKey(db_column='datasettypecv', on_delete=django.db.models.deletion.CASCADE, to='dataloader.DataSetType'),
        ),
        migrations.AddField(
            model_name='dataquality',
            name='data_quality_type',
            field=models.ForeignKey(db_column='dataqualitytypecv', on_delete=django.db.models.deletion.CASCADE, to='dataloader.DataQualityType'),
        ),
        migrations.AddField(
            model_name='dataquality',
            name='data_quality_value_unit',
            field=models.ForeignKey(blank=True, db_column='dataqualityvalueunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='dataloggerfilecolumn',
            name='instrument_output_variable',
            field=models.ForeignKey(db_column='instrumentoutputvariableid', on_delete=django.db.models.deletion.CASCADE, related_name='data_logger_file_columns', to='dataloader.InstrumentOutputVariable'),
        ),
        migrations.AddField(
            model_name='dataloggerfilecolumn',
            name='recording_interval_unit',
            field=models.ForeignKey(blank=True, db_column='recordingintervalunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='recording_interval_data_logger_file_columns', to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='dataloggerfilecolumn',
            name='result',
            field=models.ForeignKey(blank=True, db_column='resultid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='data_logger_file_columns', to='dataloader.Result'),
        ),
        migrations.AddField(
            model_name='dataloggerfilecolumn',
            name='scan_interval_unit',
            field=models.ForeignKey(blank=True, db_column='scanintervalunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='scan_interval_data_logger_file_columns', to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='dataloggerfile',
            name='program',
            field=models.ForeignKey(db_column='programid', on_delete=django.db.models.deletion.CASCADE, related_name='data_logger_files', to='dataloader.DataLoggerProgramFile'),
        ),
        migrations.AddField(
            model_name='citationexternalidentifier',
            name='external_identifier_system',
            field=models.ForeignKey(db_column='externalidentifiersystemid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.ExternalIdentifierSystem'),
        ),
        migrations.AddField(
            model_name='citationextensionpropertyvalue',
            name='property',
            field=models.ForeignKey(db_column='propertyid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.ExtensionProperty'),
        ),
        migrations.AddField(
            model_name='citation',
            name='extension_property_values',
            field=models.ManyToManyField(related_name='citations', through='dataloader.CitationExtensionPropertyValue', to='dataloader.ExtensionProperty'),
        ),
        migrations.AddField(
            model_name='citation',
            name='external_identifiers',
            field=models.ManyToManyField(related_name='citations', through='dataloader.CitationExternalIdentifier', to='dataloader.ExternalIdentifierSystem'),
        ),
        migrations.AddField(
            model_name='categoricalresultvalue',
            name='annotations',
            field=models.ManyToManyField(related_name='annotated_categorical_values', through='dataloader.CategoricalResultValueAnnotation', to='dataloader.Annotation'),
        ),
        migrations.AddField(
            model_name='calibrationstandard',
            name='reference_material',
            field=models.ForeignKey(db_column='calibration_standards', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.ReferenceMaterial'),
        ),
        migrations.AddField(
            model_name='calibrationreferenceequipment',
            name='equipment',
            field=models.ForeignKey(db_column='equipmentid', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.Equipment'),
        ),
        migrations.AddField(
            model_name='authorlist',
            name='citation',
            field=models.ForeignKey(db_column='citationid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.Citation'),
        ),
        migrations.AddField(
            model_name='authorlist',
            name='person',
            field=models.ForeignKey(db_column='personid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.People'),
        ),
        migrations.AddField(
            model_name='annotation',
            name='annotation_type',
            field=models.ForeignKey(db_column='annotationtypecv', on_delete=django.db.models.deletion.CASCADE, to='dataloader.AnnotationType'),
        ),
        migrations.AddField(
            model_name='annotation',
            name='annotator',
            field=models.ForeignKey(blank=True, db_column='annotatorid', null=True, on_delete=django.db.models.deletion.CASCADE, to='dataloader.People'),
        ),
        migrations.AddField(
            model_name='annotation',
            name='citation',
            field=models.ForeignKey(blank=True, db_column='citationid', null=True, on_delete=django.db.models.deletion.CASCADE, to='dataloader.Citation'),
        ),
        migrations.AddField(
            model_name='affiliation',
            name='organization',
            field=models.ForeignKey(blank=True, db_column='organizationid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='affiliations', to='dataloader.Organization'),
        ),
        migrations.AddField(
            model_name='affiliation',
            name='person',
            field=models.ForeignKey(db_column='personid', on_delete=django.db.models.deletion.CASCADE, related_name='affiliations', to='dataloader.People'),
        ),
        migrations.AddField(
            model_name='actionextensionpropertyvalue',
            name='action',
            field=models.ForeignKey(db_column='actionid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.Action'),
        ),
        migrations.AddField(
            model_name='actionextensionpropertyvalue',
            name='property',
            field=models.ForeignKey(db_column='propertyid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.ExtensionProperty'),
        ),
        migrations.AddField(
            model_name='actiondirective',
            name='action',
            field=models.ForeignKey(db_column='actionid', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.Action'),
        ),
        migrations.AddField(
            model_name='actiondirective',
            name='directive',
            field=models.ForeignKey(db_column='directiveid', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.Directive'),
        ),
        migrations.AddField(
            model_name='actionby',
            name='action',
            field=models.ForeignKey(db_column='actionid', on_delete=django.db.models.deletion.CASCADE, related_name='action_by', to='dataloader.Action'),
        ),
        migrations.AddField(
            model_name='actionby',
            name='affiliation',
            field=models.ForeignKey(db_column='affiliationid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.Affiliation'),
        ),
        migrations.AddField(
            model_name='actionannotation',
            name='action',
            field=models.ForeignKey(db_column='actionid', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.Action'),
        ),
        migrations.AddField(
            model_name='actionannotation',
            name='annotation',
            field=models.ForeignKey(db_column='annotationid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.Annotation'),
        ),
        migrations.AddField(
            model_name='action',
            name='action_type',
            field=models.ForeignKey(db_column='actiontypecv', on_delete=django.db.models.deletion.CASCADE, to='dataloader.ActionType'),
        ),
        migrations.AddField(
            model_name='action',
            name='annotations',
            field=models.ManyToManyField(related_name='annotated_actions', through='dataloader.ActionAnnotation', to='dataloader.Annotation'),
        ),
        migrations.AddField(
            model_name='action',
            name='directives',
            field=models.ManyToManyField(related_name='actions', through='dataloader.ActionDirective', to='dataloader.Directive'),
        ),
        migrations.AddField(
            model_name='action',
            name='equipment_used',
            field=models.ManyToManyField(related_name='actions', through='dataloader.EquipmentUsed', to='dataloader.Equipment'),
        ),
        migrations.AddField(
            model_name='action',
            name='extension_property_values',
            field=models.ManyToManyField(related_name='actions', through='dataloader.ActionExtensionPropertyValue', to='dataloader.ExtensionProperty'),
        ),
        migrations.AddField(
            model_name='action',
            name='method',
            field=models.ForeignKey(db_column='methodid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.Method'),
        ),
        migrations.AddField(
            model_name='action',
            name='people',
            field=models.ManyToManyField(related_name='actions', through='dataloader.ActionBy', to='dataloader.Affiliation'),
        ),
        migrations.AddField(
            model_name='transectresultvalue',
            name='result',
            field=models.ForeignKey(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.TransectResult'),
        ),
        migrations.AddField(
            model_name='transectresult',
            name='intended_time_spacing_unit',
            field=models.ForeignKey(blank=True, db_column='intendedtimespacingunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='transectresult',
            name='intended_transect_spacing_unit',
            field=models.ForeignKey(blank=True, db_column='intendedtransectspacingunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='transectresult',
            name='spatial_reference',
            field=models.ForeignKey(blank=True, db_column='spatialreferenceid', null=True, on_delete=django.db.models.deletion.CASCADE, to='dataloader.SpatialReference'),
        ),
        migrations.AddField(
            model_name='transectresult',
            name='z_location_unit',
            field=models.ForeignKey(blank=True, db_column='zlocationunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='trajectoryresultvalue',
            name='result',
            field=models.ForeignKey(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.TrajectoryResult'),
        ),
        migrations.AddField(
            model_name='trajectoryresult',
            name='intended_time_spacing_unit',
            field=models.ForeignKey(blank=True, db_column='intendedtimespacingunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='trajectoryresult',
            name='intended_trajectory_spacing_unit',
            field=models.ForeignKey(blank=True, db_column='intendedtrajectoryspacingunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='trajectoryresult',
            name='spatial_reference',
            field=models.ForeignKey(blank=True, db_column='spatialreferenceid', null=True, on_delete=django.db.models.deletion.CASCADE, to='dataloader.SpatialReference'),
        ),
        migrations.AddField(
            model_name='timeseriesresultvalue',
            name='result',
            field=models.ForeignKey(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, related_name='values', to='dataloader.TimeSeriesResult'),
        ),
        migrations.AddField(
            model_name='timeseriesresult',
            name='intended_time_spacing_unit',
            field=models.ForeignKey(blank=True, db_column='intendedtimespacingunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='timeseriesresult',
            name='spatial_reference',
            field=models.ForeignKey(blank=True, db_column='spatialreferenceid', null=True, on_delete=django.db.models.deletion.CASCADE, to='dataloader.SpatialReference'),
        ),
        migrations.AddField(
            model_name='timeseriesresult',
            name='x_location_unit',
            field=models.ForeignKey(blank=True, db_column='xlocationunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='timeseriesresult',
            name='y_location_unit',
            field=models.ForeignKey(blank=True, db_column='ylocationunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='timeseriesresult',
            name='z_location_unit',
            field=models.ForeignKey(blank=True, db_column='zlocationunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='spectraresultvalue',
            name='result',
            field=models.ForeignKey(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.SpectraResult'),
        ),
        migrations.AddField(
            model_name='spectraresult',
            name='intended_wavelength_spacing_unit',
            field=models.ForeignKey(blank=True, db_column='intendedwavelengthspacingunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='spectraresult',
            name='spatial_reference',
            field=models.ForeignKey(blank=True, db_column='spatialreferenceid', null=True, on_delete=django.db.models.deletion.CASCADE, to='dataloader.SpatialReference'),
        ),
        migrations.AddField(
            model_name='spectraresult',
            name='x_location_unit',
            field=models.ForeignKey(blank=True, db_column='xlocationunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='spectraresult',
            name='y_location_unit',
            field=models.ForeignKey(blank=True, db_column='ylocationunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='spectraresult',
            name='z_location_unit',
            field=models.ForeignKey(blank=True, db_column='zlocationunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='specimentaxonomicclassifier',
            name='sampling_feature',
            field=models.ForeignKey(db_column='samplingfeatureid', on_delete=django.db.models.deletion.CASCADE, related_name='taxonomic_classifiers', to='dataloader.Specimen'),
        ),
        migrations.AddField(
            model_name='site',
            name='spatial_reference',
            field=models.ForeignKey(db_column='spatialreferenceid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.SpatialReference'),
        ),
        migrations.AddField(
            model_name='sectionresultvalue',
            name='result',
            field=models.ForeignKey(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.SectionResult'),
        ),
        migrations.AddField(
            model_name='sectionresult',
            name='intended_time_spacing_unit',
            field=models.ForeignKey(blank=True, db_column='intendedtimespacingunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='sectionresult',
            name='intended_x_spacing_unit',
            field=models.ForeignKey(blank=True, db_column='intendedxspacingunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='sectionresult',
            name='intended_z_spacing_unit',
            field=models.ForeignKey(blank=True, db_column='intendedzspacingunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='sectionresult',
            name='spatial_reference',
            field=models.ForeignKey(blank=True, db_column='spatialreferenceid', null=True, on_delete=django.db.models.deletion.CASCADE, to='dataloader.SpatialReference'),
        ),
        migrations.AddField(
            model_name='sectionresult',
            name='y_location_unit',
            field=models.ForeignKey(blank=True, db_column='ylocationunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='resultnormalizationvalue',
            name='normalized_by_reference_material_value',
            field=models.ForeignKey(db_column='normalizedbyreferencematerialvalueid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.ReferenceMaterialValue'),
        ),
        migrations.AddField(
            model_name='profileresultvalue',
            name='result',
            field=models.ForeignKey(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.ProfileResult'),
        ),
        migrations.AddField(
            model_name='profileresult',
            name='intended_time_spacing_unit',
            field=models.ForeignKey(blank=True, db_column='intendedtimespacingunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='profileresult',
            name='intended_z_spacing_unit',
            field=models.ForeignKey(blank=True, db_column='intendedzspacingunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='profileresult',
            name='spatial_reference',
            field=models.ForeignKey(blank=True, db_column='spatialreferenceid', null=True, on_delete=django.db.models.deletion.CASCADE, to='dataloader.SpatialReference'),
        ),
        migrations.AddField(
            model_name='profileresult',
            name='x_location_unit',
            field=models.ForeignKey(blank=True, db_column='xlocationunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='profileresult',
            name='y_location_unit',
            field=models.ForeignKey(blank=True, db_column='ylocationunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='pointcoverageresultvalue',
            name='result',
            field=models.ForeignKey(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.PointCoverageResult'),
        ),
        migrations.AddField(
            model_name='pointcoverageresult',
            name='intended_x_spacing_unit',
            field=models.ForeignKey(blank=True, db_column='intendedxspacingunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='pointcoverageresult',
            name='intended_y_spacing_unit',
            field=models.ForeignKey(blank=True, db_column='intendedyspacingunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='pointcoverageresult',
            name='spatial_reference',
            field=models.ForeignKey(blank=True, db_column='spatialreferenceid', null=True, on_delete=django.db.models.deletion.CASCADE, to='dataloader.SpatialReference'),
        ),
        migrations.AddField(
            model_name='pointcoverageresult',
            name='time_aggregation_interval_unit',
            field=models.ForeignKey(blank=True, db_column='timeaggregationintervalunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='pointcoverageresult',
            name='z_location_unit',
            field=models.ForeignKey(blank=True, db_column='zlocationunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='measurementresultvalue',
            name='result',
            field=models.ForeignKey(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.MeasurementResult'),
        ),
        migrations.AddField(
            model_name='measurementresult',
            name='spatial_reference',
            field=models.ForeignKey(blank=True, db_column='spatialreferenceid', null=True, on_delete=django.db.models.deletion.CASCADE, to='dataloader.SpatialReference'),
        ),
        migrations.AddField(
            model_name='measurementresult',
            name='time_aggregation_interval_unit',
            field=models.ForeignKey(blank=True, db_column='timeaggregationintervalunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='measurementresult',
            name='x_location_unit',
            field=models.ForeignKey(blank=True, db_column='xlocationunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='measurementresult',
            name='y_location_unit',
            field=models.ForeignKey(blank=True, db_column='ylocationunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='measurementresult',
            name='z_location_unit',
            field=models.ForeignKey(blank=True, db_column='zlocationunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='categoricalresultvalue',
            name='result',
            field=models.ForeignKey(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.CategoricalResult'),
        ),
        migrations.AddField(
            model_name='categoricalresult',
            name='spatial_reference',
            field=models.ForeignKey(blank=True, db_column='spatialreferenceid', null=True, on_delete=django.db.models.deletion.CASCADE, to='dataloader.SpatialReference'),
        ),
        migrations.AddField(
            model_name='categoricalresult',
            name='x_location_unit',
            field=models.ForeignKey(blank=True, db_column='xlocationunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='categoricalresult',
            name='y_location_unit',
            field=models.ForeignKey(blank=True, db_column='ylocationunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='categoricalresult',
            name='z_location_unit',
            field=models.ForeignKey(blank=True, db_column='zlocationunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.Unit'),
        ),
        migrations.AddField(
            model_name='calibrationstandard',
            name='action',
            field=models.ForeignKey(db_column='actionid', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.CalibrationAction'),
        ),
        migrations.AddField(
            model_name='calibrationreferenceequipment',
            name='action',
            field=models.ForeignKey(db_column='actionid', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dataloader.CalibrationAction'),
        ),
        migrations.AddField(
            model_name='calibrationaction',
            name='calibration_standards',
            field=models.ManyToManyField(related_name='calibration_actions', through='dataloader.CalibrationStandard', to='dataloader.ReferenceMaterial'),
        ),
        migrations.AddField(
            model_name='calibrationaction',
            name='instrument_output_variable',
            field=models.ForeignKey(db_column='instrumentoutputvariableid', on_delete=django.db.models.deletion.CASCADE, to='dataloader.InstrumentOutputVariable'),
        ),
        migrations.AddField(
            model_name='calibrationaction',
            name='reference_equipment',
            field=models.ManyToManyField(related_name='calibration_reference_actions', through='dataloader.CalibrationReferenceEquipment', to='dataloader.Equipment'),
        ),
    ]
